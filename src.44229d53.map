{"version":3,"sources":["../node_modules/wakit/src/connectAll.js","../node_modules/wakit/src/setParams.js","../node_modules/wakit/src/createNodes.js","../node_modules/wakit/src/num.js","../node_modules/wakit/src/paramTimeline.js","../node_modules/wakit/src/rand.js","../node_modules/wakit/src/index.js","audio-components.js","../node_modules/frequency-to-midi-note-number/index.js","defs.js","../node_modules/tunajs/tuna.js","osc-scope.js","index.js"],"names":["require","connectAll","createNodes","setParams","paramTimeline","num","rand","seq","Filter","props","children","_id","node","ac","createBiquadFilter","forEach","ch","connect","update","undefined","key","updateParam","type","value","Array","isArray","v","push","dest","disconnect","time","start","stop","frequency","gain","Q","Osc","nodes","osc","ConstantSourceNode","amp","disconnected","i","threshold","id","setInterval","detune","Env","param","currentTime","finalTime","from","to","attack","release","Infinity","cancelScheduledValues","module","exports","Math","round","log2","defs","noteToFreq","note","pow","freqToNote","window","AudioContext","oscTypes","detuneSource","duration","floatInRange","freqFactor","gainFactor","gainK","inRange","MINVAL","findFirstPositiveZeroCrossing","buf","buflen","height","t","last_zero","createNode","createAnalyser","fftSize","createRenderFunc","canvas","data","Uint8Array","width","context","getContext","getByteTimeDomainData","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","c","zeroCross","j","lineTo","stroke","renderLoop","animFrameId","renderFunc","loop","requestAnimationFrame","Tuna","tuna","master","createGain","convolver","Convolver","reverbImpulse","delay","PingPongDelay","cabinet","Cabinet","guitarImpulse","overdrive","Overdrive","chorus","Chorus","phaser","Phaser","compressor","createDynamicsCompressor","destination","scope","scopeNode","scopeCanvas","document","querySelector","muteCheckbox","muteText","addEventListener","event","isMuted","checked","innerHTML","lastTime","detuneSource1","createConstantSource","fn","lastTime2","detuneSource2","lastTime3","detuneSource3","notes","noteSeq","play","amount","offset","linearRampToValueAtTime"],"mappings":"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","file":"src.44229d53.map","sourceRoot":"../src","sourcesContent":["function connectAll (...args) {\n  for (var i = 0; i < args.length - 1; i += 1) {\n    args[i].connect(args[i + 1])\n  }\n\n  return args[0]\n}\n\nconnectAll.obj = function (obj) {\n  connectAll(...Object.values(obj))\n  return obj\n}\n\nmodule.exports = connectAll\n","// https://github.com/benji6/virtual-audio-graph/blob/master/src/data.ts\nconst audioParamProperties = [\n  'attack',\n  'delayTime',\n  'detune',\n  'frequency',\n  'gain',\n  'knee',\n  'pan',\n  'playbackRate',\n  'ratio',\n  'reduction',\n  'release',\n  'threshold',\n  'Q',\n]\n\nmodule.exports = function setParams (node, params) {\n  Object.keys(params).forEach(key => {\n    const value = params[key]\n    if (audioParamProperties.indexOf(key) >= 0) {\n      node[key].value = value\n    } else {\n      node[key] = value\n    }\n  })\n  \n  return node\n}\n\nmodule.exports.delta = function delta (node, params) {\n  Object.keys(params).forEach(key => {\n    const value = params[key]\n    if (audioParamProperties.indexOf(key) >= 0) {\n      node[key].value += value\n    } else {\n      node[key] += value\n    }\n  })\n  \n  return node\n}\n","const setParams = require('./setParams')\n\nfunction createNode (ac, info) {\n  if (!info.type) { debugger }\n  const func = `create${info.type}`\n  return ac[func]()\n}\n\nmodule.exports = function (ac, info) {\n  let prev\n  const nodes = {}\n\n  Object.keys(info).forEach(key => {\n    const item = info[key]\n    \n    if (item instanceof AudioParam || item instanceof AudioNode) {\n      prev.connect(item)\n      return\n    }\n\n    const node = item.node || createNode(ac, item)\n\n    if (node instanceof AudioNode) {\n      nodes[key] = node\n    }\n\n    if (item.params) {\n      setParams(node, item.params)\n    }\n\n    // connect previous node to this one\n    if (prev) {\n      prev.connect(node)\n    }\n\n    prev = node\n  })\n\n  return nodes\n}\n","function percentRange (min, max, percent) {\n  const range = max - min\n  return min + (percent * range)\n}\n\nfunction wrap (number, lower, upper) {\n  if (number < lower) { return upper - 1 }\n  if (number >= upper) { return lower }\n  return number\n}\n\nmodule.exports = {\n  percentRange,\n  wrap\n}\n","module.exports = function paramTimeline (param, steps) {\n  let time\n\n  steps.forEach(step => {\n    if (step.time || !time) {\n      time = step.time || 0\n    }\n\n    if (step.value) {\n      param.setValueAtTime(step.value, time)\n      return\n    }\n\n    if (step.linearTo) {\n      param.linearRampToValueAtTime(step.linearTo, time + step.duration)\n      time += step.duration\n      return\n    }\n\n    if (step.expTo) {\n      param.exponentialRampToValueAtTime(step.expTo, time + step.duration)\n      time += step.duration\n      return\n    }\n  })\n  \n  return time\n}\n","function inRange (min, max) {\n  return Math.floor(Math.random() * (max - min)) + min\n}\n\nfunction floatInRange (min, max) {\n  return min + (Math.random() * (max - min))\n}\n\nfunction from (values) {\n  return values[inRange(0, values.length)]\n}\n\nmodule.exports = {\n  inRange,\n  floatInRange,\n  from\n}\n","module.exports.connectAll = require('./connectAll')\nmodule.exports.createNodes = require('./createNodes')\nmodule.exports.num = require('./num')\nmodule.exports.paramTimeline = require('./paramTimeline')\nmodule.exports.rand = require('./rand')\nmodule.exports.setParams = require('./setParams')\n","const {\n  connectAll,\n  createNodes,\n  setParams,\n  paramTimeline,\n  num,\n  rand\n} = require('wakit')\n\nlet seq = 0\n\nexport class Filter {\n  constructor (props, children) {\n    this._id = ++seq\n    this.node = ac.createBiquadFilter()\n\n    this.children = children\n    this.children.forEach(ch => ch.connect(this.node))\n\n    this.update(props)\n  }\n\n  get frequency () {\n    return this.node.frequency\n  }\n\n  set frequency (value) {\n    this.node.frequency.value = value\n  }\n\n  get gain () {\n    return this.node.gain\n  }\n\n  set gain (value) {\n    this.node.gain.value = value\n  }\n\n  get Q () {\n    return this.node.Q\n  }\n\n  set Q (value) {\n    this.node.Q.value = value\n  }\n\n  update (props) {\n    const params = [\n      'frequency',\n      'gain',\n      'Q'\n    ]\n\n    params.forEach(key => {\n      if (props[key] === undefined) { return }\n\n      this.updateParam(key, props[key])\n    })\n\n    if (props.type) {\n      this.node.type = props.type\n    }\n  }\n\n  updateParam (key, value) {\n    (Array.isArray(value) ? value : [value]).forEach(v => {\n      if (typeof v === 'number') {\n        this[key] = v\n      } else if (v.connect) {\n        v.connect(this[key])\n        this.children.push(v)\n      }\n    })\n  }\n\n  connect (dest) {\n    this.node.connect(dest)\n  }\n\n  disconnect () {\n    this.node.disconnect()\n    delete this.node\n  }\n\n  start (time) {\n    this.children.forEach(ch => ch.start(time))\n  }\n\n  stop (time) {\n    this.children.forEach(ch => ch.stop(time))\n  }\n}\n\nexport class Osc {\n  constructor (props) {\n    this._id = ++seq\n    this.nodes = createNodes(ac, {\n      osc: {\n        type: 'Oscillator'\n      },\n      amp: {\n        type: 'Gain'\n      }\n    })\n\n    this.children = []\n    this.update(props)\n  }\n\n  get detune () {\n    return this.nodes.osc.detune\n  }\n\n  set detune (value) {\n    this.nodes.osc.detune.value = value\n  }\n\n  get frequency () {\n    return this.nodes.osc.frequency\n  }\n\n  set frequency (value) {\n    this.nodes.osc.frequency.value = value\n  }\n\n  get gain () {\n    return this.nodes.amp.gain\n  }\n\n  set gain (value) {\n    this.nodes.amp.gain.value = value\n  }\n\n  update (props) {\n    const params = [\n      'detune',\n      'frequency',\n      'gain'\n    ]\n\n    params.forEach(key => {\n      if (props[key] === undefined) { return }\n\n      this.updateParam(key, props[key])\n    })\n\n    if (props.type) {\n      this.nodes.osc.type = props.type\n    }\n  }\n\n  updateParam (key, value) {\n    (Array.isArray(value) ? value : [value]).forEach(v => {\n      if (typeof v === 'number') {\n        this[key] = v\n      } else if (v.connect) {\n        v.connect(this[key])\n\n        if (!(v instanceof ConstantSourceNode)) {\n          this.children.push(v)\n        }\n      }\n    })\n  }\n\n  connect (dest) {\n    this.nodes.amp.connect(dest)\n  }\n\n  disconnect () {\n    if (this.disconnected) {\n      return\n    }\n\n    this.children.forEach((ch, i) => {\n      ch.disconnect()\n      delete this.children[i]\n    })\n\n    this.nodes.amp.disconnect()\n    this.nodes.osc.disconnect()\n\n    delete this.nodes.amp\n    delete this.nodes.osc\n\n    this.disconnected = true\n  }\n\n  start (time) {\n    this.children.forEach(ch => ch.start(time))\n    this.nodes.osc.start(time)\n\n    return time\n  }\n\n  stop (time) {\n    this.children.forEach(ch => {\n      ch.stop(time)\n    })\n\n    const threshold = 0.002\n    const id = setInterval(() => {\n      if (this.disconnected) {\n        clearInterval(id)\n        return\n      }\n\n      if (this.gain.value < threshold) {\n        this.nodes.osc.stop()\n        this.disconnect()\n        clearInterval(id)\n      }\n    }, 500)\n  }\n}\n\nexport class Env {\n  constructor (props) {\n    this._id = ++seq\n    this.props = props\n    this.param = null\n  }\n\n  connect (param) {\n    this.param = param\n  }\n\n  disconnect () {\n    delete this.param\n  }\n\n  start (time = ac.currentTime) {\n    const { props, param } = this\n    if (!param) { return time }\n\n    const { value } = param\n    const finalTime = paramTimeline(param, [\n      {\n        time,\n        value: props.from || 0.0001\n      },\n\n      {\n        linearTo: props.to || value,\n        duration: props.attack || 0.1\n      }\n    ])\n\n    return finalTime\n  }\n  \n  stop (time = ac.currentTime) {\n    const { props, param } = this\n    if (!param) { return time }\n\n    if (props.release === undefined) { return Infinity }\n\n    const { value } = param\n\n    param.cancelScheduledValues(time)\n    const finalTime = paramTimeline(param, [\n      {\n        time,\n        value: props.to || value\n      },\n\n      {\n        linearTo: props.from || 0.0001,\n        duration: props.release || 0.1\n      }\n    ])\n\n    return finalTime\n  }\n}\n","'use strict';\n\nmodule.exports = function frequencyToMidiNoteNumber(frequency) {\n  return Math.round(69 + 12 * Math.log2(frequency / 440));\n};\n","import { Env, Osc, Filter } from './audio-components'\n\nconst {\n  connectAll,\n  createNodes,\n  setParams,\n  paramTimeline,\n  num,\n  rand\n} = require('wakit')\n\nconst noteToFreq = (note) => 440 * Math.pow(2, (note - 69) / 12)\nconst freqToNote = require('frequency-to-midi-note-number')\n\nif (!window.ac) { window.ac = new AudioContext() }\nconst { ac } = window\n\nconst oscTypes = [\n  'sine',\n  'triangle',\n  'sawtooth'\n]\n\nconst defs = []\n\ndefs[0] = ({ detune, time, duration }, detuneSource) => {\n  const frequency = 110\n  const freqFactor = .5\n  const gainFactor = .25\n  const gainK = -2.0\n\n  const note = new Filter({\n    type: 'lowpass',\n    frequency: [\n      20000,\n      new Env({\n        attack: duration * .5\n      })\n    ],\n    gain: 1,\n    Q: 1\n  }, [\n    new Osc({\n      type: rand.from(oscTypes),\n\n      detune: [\n        new Env({\n          attack: duration * .5,\n          from: detune,\n          to: detune - 10\n        }),\n        detuneSource\n      ],\n\n      gain: new Env({\n        attack: duration * .9,\n        release: duration * .5,\n        to: 0.3\n      }),\n\n      frequency: [\n        frequency,\n\n        new Osc({\n          type: rand.from(oscTypes),\n          frequency: frequency * freqFactor,\n          detune: [\n            new Env({\n              attack: duration * .5,\n              from: detune,\n              to: detune - 10\n            }),\n            detuneSource\n          ],\n          \n          gain: [\n            (frequency * gainFactor) * Math.pow(2, (freqToNote(frequency) - 60) / 12 * gainK),\n            new Env({\n              attack: duration * .5,\n              release: duration * 2\n            }),\n            new Osc({\n              frequency: [\n                rand.floatInRange(.1, 5),\n                new Env({\n                  attack: duration * .5,\n                })\n              ],\n              gain: [\n                100,\n                new Env({\n                  attack: 3.0,\n                })\n              ]\n            })\n          ]\n        })\n      ]\n    })\n  ])\n\n  return note\n}\n\ndefs[1] = ({ detune, time, duration }, detuneSource) => {\n  const frequency = 110\n  const freqFactor = 3\n  const gainFactor = 3\n  const gainK = -2.0\n\n  const note = new Filter({\n    type: 'highpass',\n    frequency: new Env({\n      attack: duration * .5,\n      from: 10000,\n      to: 0\n    }),\n    Q: 1\n  }, [\n    new Osc({\n      type: rand.from(oscTypes),\n\n      gain: new Env({\n        attack: duration * .9,\n        release: duration * .5,\n        to: 0.1\n      }),\n\n      detune: detuneSource,\n\n      frequency: [\n        frequency,\n\n        new Osc({\n          type: rand.from(oscTypes),\n\n          frequency: frequency * freqFactor,\n\n          detune: detuneSource,\n          \n          gain: [\n            (frequency * gainFactor) * Math.pow(2, (freqToNote(frequency) - 60) / 12 * gainK),\n            new Env({\n              attack: duration * .5,\n              release: duration * 2\n            }),\n            new Osc({\n              frequency: [\n                rand.floatInRange(.1, 5),\n                new Env({\n                  attack: duration * .5,\n                })\n              ],\n              gain: [\n                100,\n                new Env({\n                  attack: 3.0,\n                })\n              ]\n            })\n          ]\n        })\n      ]\n    })\n  ])\n\n  return note\n}\n\ndefs[2] = ({ detune, time, duration }, detuneSource) => {\n  const frequency = rand.from([ 110, 220 ])\n  const freqFactor = rand.from([ .25, .5, 1, 2, 4 ])\n  const gainFactor = rand.floatInRange(.25, 2)\n  const gainK = rand.floatInRange(-2, 2)\n\n  const note = new Filter({\n    type: rand.from(['notch', 'lowpass']),\n    frequency: new Env({\n      attack: duration,\n      from: 20000,\n      to: 0\n    }),\n    gain: 50,\n    Q: 1\n  }, [\n    new Osc({\n      type: rand.from(oscTypes),\n\n      detune: [\n        detune,\n        detuneSource\n      ],\n\n      gain: new Env({\n        attack: duration * .9,\n        release: duration * .5,\n        to: 0.1\n      }),\n\n      frequency: [\n        frequency,\n\n        new Osc({\n          type: rand.from(oscTypes),\n          frequency: frequency * freqFactor,\n          detune: [\n            detune,\n            detuneSource\n          ],\n\n          gain: [\n            (frequency * gainFactor) * Math.pow(2, (freqToNote(frequency) - 60) / 12 * gainK),\n            new Env({\n              attack: duration * .5,\n              release: duration * 2\n            }),\n            new Osc({\n              frequency: [\n                rand.floatInRange(.1, 5),\n                new Env({\n                  attack: duration * .5,\n                })\n              ],\n              gain: [\n                rand.inRange(1, 100),\n                new Env({\n                  attack: duration * .3,\n                })\n              ]\n            })\n          ]\n        })\n      ]\n    })\n  ])\n\n  return note\n}\n\ndefs[3] = ({ detune, time, duration }, detuneSource) => {\n  const frequency = rand.from([ 220, 440, 880 ])\n  const freqFactor = rand.from([ .25, .5, 1, 2, 4 ])\n  const gainFactor = rand.floatInRange(.25, 2)\n  const gainK = rand.floatInRange(-2, 2)\n\n  const note = new Filter({\n    type: rand.from(['notch', 'highpass', 'lowpass']),\n    frequency: [\n      15000,\n      new Osc({\n        frequency: [\n          rand.floatInRange(.1, 5),\n          new Env({\n            attack: duration * .5,\n          })\n        ],\n        gain: [\n          10000,\n          new Env({\n            attack: duration * .3,\n          })\n        ]\n      })\n    ],\n    Q: 1\n  }, [\n    new Osc({\n      type: rand.from(oscTypes),\n\n      detune: [\n        detune,\n        detuneSource\n      ],\n\n      gain: new Env({\n        attack: rand.floatInRange(0.01, duration * .5),\n        release: duration * 1.5,\n        to: .1\n      }),\n\n      frequency,\n    })\n  ])\n\n  return note\n}\n\nexport default defs\n","/*\r\n    Copyright (c) 2012 DinahMoe AB & Oskar Eriksson\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation\r\n    files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy,\r\n    modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software\r\n    is furnished to do so, subject to the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\r\n    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n/*global module*/\r\n(function() {\r\n\r\n    var userContext,\r\n        userInstance,\r\n        pipe = function(param, val) {\r\n            param.value = val;\r\n        },\r\n        Super = Object.create(null, {\r\n            activate: {\r\n                writable: true,\r\n                value: function(doActivate) {\r\n                    if (doActivate) {\r\n                        this.input.disconnect();\r\n                        this.input.connect(this.activateNode);\r\n                        if (this.activateCallback) {\r\n                            this.activateCallback(doActivate);\r\n                        }\r\n                    } else {\r\n                        this.input.disconnect();\r\n                        this.input.connect(this.output);\r\n                    }\r\n                }\r\n            },\r\n            bypass: {\r\n                get: function() {\r\n                    return this._bypass;\r\n                },\r\n                set: function(value) {\r\n                    if (this._lastBypassValue === value) {\r\n                        return;\r\n                    }\r\n                    this._bypass = value;\r\n                    this.activate(!value);\r\n                    this._lastBypassValue = value;\r\n                }\r\n            },\r\n            connect: {\r\n                value: function(target) {\r\n                    this.output.connect(target);\r\n                }\r\n            },\r\n            disconnect: {\r\n                value: function(target) {\r\n                    this.output.disconnect(target);\r\n                }\r\n            },\r\n            connectInOrder: {\r\n                value: function(nodeArray) {\r\n                    var i = nodeArray.length - 1;\r\n                    while (i--) {\r\n                        if (!nodeArray[i].connect) {\r\n                            return console.error(\"AudioNode.connectInOrder: TypeError: Not an AudioNode.\", nodeArray[i]);\r\n                        }\r\n                        if (nodeArray[i + 1].input) {\r\n                            nodeArray[i].connect(nodeArray[i + 1].input);\r\n                        } else {\r\n                            nodeArray[i].connect(nodeArray[i + 1]);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            getDefaults: {\r\n                value: function() {\r\n                    var result = {};\r\n                    for (var key in this.defaults) {\r\n                        result[key] = this.defaults[key].value;\r\n                    }\r\n                    return result;\r\n                }\r\n            },\r\n            automate: {\r\n                value: function(property, value, duration, startTime) {\r\n                    var start = startTime ? ~~(startTime / 1000) : userContext.currentTime,\r\n                        dur = duration ? ~~(duration / 1000) : 0,\r\n                        _is = this.defaults[property],\r\n                        param = this[property],\r\n                        method;\r\n\r\n                    if (param) {\r\n                        if (_is.automatable) {\r\n                            if (!duration) {\r\n                                method = \"setValueAtTime\";\r\n                            } else {\r\n                                method = \"linearRampToValueAtTime\";\r\n                                param.cancelScheduledValues(start);\r\n                                param.setValueAtTime(param.value, start);\r\n                            }\r\n                            param[method](value, dur + start);\r\n                        } else {\r\n                            param = value;\r\n                        }\r\n                    } else {\r\n                        console.error(\"Invalid Property for \" + this.name);\r\n                    }\r\n                }\r\n            }\r\n        }),\r\n        FLOAT = \"float\",\r\n        BOOLEAN = \"boolean\",\r\n        STRING = \"string\",\r\n        INT = \"int\";\r\n\r\n    if (typeof module !== \"undefined\" && module.exports) {\r\n        module.exports = Tuna;\r\n    } else if (typeof define === \"function\") {\r\n        window.define(\"Tuna\", definition);\r\n    } else {\r\n        window.Tuna = Tuna;\r\n    }\r\n\r\n    function definition() {\r\n        return Tuna;\r\n    }\r\n\r\n    function Tuna(context) {\r\n        if (!(this instanceof Tuna)) {\r\n            return new Tuna(context);\r\n        }\r\n\r\n        var _window = typeof window === \"undefined\" ? {} : window;\r\n\r\n        if (!_window.AudioContext) {\r\n            _window.AudioContext = _window.webkitAudioContext;\r\n        }\r\n        if (!context) {\r\n            console.log(\"tuna.js: Missing audio context! Creating a new context for you.\");\r\n            context = _window.AudioContext && (new _window.AudioContext());\r\n        }\r\n        if (!context) {\r\n            throw new Error(\"Tuna cannot initialize because this environment does not support web audio.\");\r\n        }\r\n        connectify(context);\r\n        userContext = context;\r\n        userInstance = this;\r\n    }\r\n\r\n    function connectify(context) {\r\n        if (context.__connectified__ === true) return;\r\n\r\n        var gain = context.createGain(),\r\n            proto = Object.getPrototypeOf(Object.getPrototypeOf(gain)),\r\n            oconnect = proto.connect;\r\n\r\n        proto.connect = shimConnect;\r\n        context.__connectified__ = true; // Prevent overriding connect more than once\r\n\r\n        function shimConnect() {\r\n            var node = arguments[0];\r\n            arguments[0] = Super.isPrototypeOf ? (Super.isPrototypeOf(node) ? node.input : node) : (node.input || node);\r\n            oconnect.apply(this, arguments);\r\n            return node;\r\n        }\r\n    }\r\n\r\n    function dbToWAVolume(db) {\r\n        return Math.max(0, Math.round(100 * Math.pow(2, db / 6)) / 100);\r\n    }\r\n\r\n    function fmod(x, y) {\r\n        // http://kevin.vanzonneveld.net\r\n        // *     example 1: fmod(5.7, 1.3);\r\n        // *     returns 1: 0.5\r\n        var tmp, tmp2, p = 0,\r\n            pY = 0,\r\n            l = 0.0,\r\n            l2 = 0.0;\r\n\r\n        tmp = x.toExponential().match(/^.\\.?(.*)e(.+)$/);\r\n        p = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\r\n        tmp = y.toExponential().match(/^.\\.?(.*)e(.+)$/);\r\n        pY = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\r\n\r\n        if (pY > p) {\r\n            p = pY;\r\n        }\r\n\r\n        tmp2 = (x % y);\r\n\r\n        if (p < -100 || p > 20) {\r\n            // toFixed will give an out of bound error so we fix it like this:\r\n            l = Math.round(Math.log(tmp2) / Math.log(10));\r\n            l2 = Math.pow(10, l);\r\n\r\n            return (tmp2 / l2).toFixed(l - p) * l2;\r\n        } else {\r\n            return parseFloat(tmp2.toFixed(-p));\r\n        }\r\n    }\r\n\r\n    function sign(x) {\r\n        if (x === 0) {\r\n            return 1;\r\n        } else {\r\n            return Math.abs(x) / x;\r\n        }\r\n    }\r\n\r\n    function tanh(n) {\r\n        return (Math.exp(n) - Math.exp(-n)) / (Math.exp(n) + Math.exp(-n));\r\n    }\r\n\r\n    function initValue(userVal, defaultVal) {\r\n        return userVal === undefined ? defaultVal : userVal;\r\n    }\r\n\r\n    Tuna.prototype.Bitcrusher = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.bufferSize = properties.bufferSize || this.defaults.bufferSize.value;\r\n\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.processor = userContext.createScriptProcessor(this.bufferSize, 1, 1);\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.processor);\r\n        this.processor.connect(this.output);\r\n\r\n        var phaser = 0,\r\n            last = 0,\r\n            input, output, step, i, length;\r\n        this.processor.onaudioprocess = function(e) {\r\n            input = e.inputBuffer.getChannelData(0),\r\n            output = e.outputBuffer.getChannelData(0),\r\n            step = Math.pow(1 / 2, this.bits);\r\n            length = input.length;\r\n            for (i = 0; i < length; i++) {\r\n                phaser += this.normfreq;\r\n                if (phaser >= 1.0) {\r\n                    phaser -= 1.0;\r\n                    last = step * Math.floor(input[i] / step + 0.5);\r\n                }\r\n                output[i] = last;\r\n            }\r\n        };\r\n\r\n        this.bits = properties.bits || this.defaults.bits.value;\r\n        this.normfreq = initValue(properties.normfreq, this.defaults.normfreq.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Bitcrusher.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Bitcrusher\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                bits: {\r\n                    value: 4,\r\n                    min: 1,\r\n                    max: 16,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                bufferSize: {\r\n                    value: 4096,\r\n                    min: 256,\r\n                    max: 16384,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                normfreq: {\r\n                    value: 0.1,\r\n                    min: 0.0001,\r\n                    max: 1.0,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                }\r\n            }\r\n        },\r\n        bits: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.processor.bits;\r\n            },\r\n            set: function(value) {\r\n                this.processor.bits = value;\r\n            }\r\n        },\r\n        normfreq: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.processor.normfreq;\r\n            },\r\n            set: function(value) {\r\n                this.processor.normfreq = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Cabinet = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.convolver = this.newConvolver(properties.impulsePath || \"../impulses/impulse_guitar.wav\");\r\n        this.makeupNode = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.convolver.input);\r\n        this.convolver.output.connect(this.makeupNode);\r\n        this.makeupNode.connect(this.output);\r\n\r\n        this.makeupGain = initValue(properties.makeupGain, this.defaults.makeupGain.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Cabinet.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Cabinet\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                makeupGain: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 20,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        makeupGain: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.makeupNode.gain;\r\n            },\r\n            set: function(value) {\r\n                this.makeupNode.gain.value = value;\r\n            }\r\n        },\r\n        newConvolver: {\r\n            value: function(impulsePath) {\r\n                return new userInstance.Convolver({\r\n                    impulse: impulsePath,\r\n                    dryLevel: 0,\r\n                    wetLevel: 1\r\n                });\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Chorus = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.attenuator = this.activateNode = userContext.createGain();\r\n        this.splitter = userContext.createChannelSplitter(2);\r\n        this.delayL = userContext.createDelay();\r\n        this.delayR = userContext.createDelay();\r\n        this.feedbackGainNodeLR = userContext.createGain();\r\n        this.feedbackGainNodeRL = userContext.createGain();\r\n        this.merger = userContext.createChannelMerger(2);\r\n        this.output = userContext.createGain();\r\n\r\n        this.lfoL = new userInstance.LFO({\r\n            target: this.delayL.delayTime,\r\n            callback: pipe\r\n        });\r\n        this.lfoR = new userInstance.LFO({\r\n            target: this.delayR.delayTime,\r\n            callback: pipe\r\n        });\r\n\r\n        this.input.connect(this.attenuator);\r\n        this.attenuator.connect(this.output);\r\n        this.attenuator.connect(this.splitter);\r\n        this.splitter.connect(this.delayL, 0);\r\n        this.splitter.connect(this.delayR, 1);\r\n        this.delayL.connect(this.feedbackGainNodeLR);\r\n        this.delayR.connect(this.feedbackGainNodeRL);\r\n        this.feedbackGainNodeLR.connect(this.delayR);\r\n        this.feedbackGainNodeRL.connect(this.delayL);\r\n        this.delayL.connect(this.merger, 0, 0);\r\n        this.delayR.connect(this.merger, 0, 1);\r\n        this.merger.connect(this.output);\r\n\r\n        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\r\n        this.rate = initValue(properties.rate, this.defaults.rate.value);\r\n        this.delay = initValue(properties.delay, this.defaults.delay.value);\r\n        this.depth = initValue(properties.depth, this.defaults.depth.value);\r\n        this.lfoR.phase = Math.PI / 2;\r\n        this.attenuator.gain.value = 0.6934; // 1 / (10 ^ (((20 * log10(3)) / 3) / 20))\r\n        this.lfoL.activate(true);\r\n        this.lfoR.activate(true);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Chorus.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Chorus\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                feedback: {\r\n                    value: 0.4,\r\n                    min: 0,\r\n                    max: 0.95,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                delay: {\r\n                    value: 0.0045,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                depth: {\r\n                    value: 0.7,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                rate: {\r\n                    value: 1.5,\r\n                    min: 0,\r\n                    max: 8,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        delay: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._delay;\r\n            },\r\n            set: function(value) {\r\n                this._delay = 0.0002 * (Math.pow(10, value) * 2);\r\n                this.lfoL.offset = this._delay;\r\n                this.lfoR.offset = this._delay;\r\n                this._depth = this._depth;\r\n            }\r\n        },\r\n        depth: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._depth;\r\n            },\r\n            set: function(value) {\r\n                this._depth = value;\r\n                this.lfoL.oscillation = this._depth * this._delay;\r\n                this.lfoR.oscillation = this._depth * this._delay;\r\n            }\r\n        },\r\n        feedback: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._feedback;\r\n            },\r\n            set: function(value) {\r\n                this._feedback = value;\r\n                this.feedbackGainNodeLR.gain.value = this._feedback;\r\n                this.feedbackGainNodeRL.gain.value = this._feedback;\r\n            }\r\n        },\r\n        rate: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._rate;\r\n            },\r\n            set: function(value) {\r\n                this._rate = value;\r\n                this.lfoL.frequency = this._rate;\r\n                this.lfoR.frequency = this._rate;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Compressor = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.compNode = this.activateNode = userContext.createDynamicsCompressor();\r\n        this.makeupNode = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.compNode.connect(this.makeupNode);\r\n        this.makeupNode.connect(this.output);\r\n\r\n        this.automakeup = initValue(properties.automakeup, this.defaults.automakeup.value);\r\n        this.makeupGain = initValue(properties.makeupGain, this.defaults.makeupGain.value);\r\n        this.threshold = initValue(properties.threshold, this.defaults.threshold.value);\r\n        this.release = initValue(properties.release, this.defaults.release.value);\r\n        this.attack = initValue(properties.attack, this.defaults.attack.value);\r\n        this.ratio = properties.ratio || this.defaults.ratio.value;\r\n        this.knee = initValue(properties.knee, this.defaults.knee.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Compressor.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Compressor\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                threshold: {\r\n                    value: -20,\r\n                    min: -60,\r\n                    max: 0,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                release: {\r\n                    value: 250,\r\n                    min: 10,\r\n                    max: 2000,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                makeupGain: {\r\n                    value: 1,\r\n                    min: 1,\r\n                    max: 100,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                attack: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1000,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                ratio: {\r\n                    value: 4,\r\n                    min: 1,\r\n                    max: 50,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                knee: {\r\n                    value: 5,\r\n                    min: 0,\r\n                    max: 40,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                automakeup: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        computeMakeup: {\r\n            value: function() {\r\n                var magicCoefficient = 4, // raise me if the output is too hot\r\n                    c = this.compNode;\r\n                return -(c.threshold.value - c.threshold.value / c.ratio.value) / magicCoefficient;\r\n            }\r\n        },\r\n        automakeup: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._automakeup;\r\n            },\r\n            set: function(value) {\r\n                this._automakeup = value;\r\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\r\n            }\r\n        },\r\n        threshold: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.threshold;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.threshold.value = value;\r\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\r\n            }\r\n        },\r\n        ratio: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.ratio;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.ratio.value = value;\r\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\r\n            }\r\n        },\r\n        knee: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.knee;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.knee.value = value;\r\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\r\n            }\r\n        },\r\n        attack: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.attack;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.attack.value = value / 1000;\r\n            }\r\n        },\r\n        release: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.release;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.release.value = value / 1000;\r\n            }\r\n        },\r\n        makeupGain: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.makeupNode.gain;\r\n            },\r\n            set: function(value) {\r\n                this.makeupNode.gain.value = dbToWAVolume(value);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Convolver = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.convolver = userContext.createConvolver();\r\n        this.dry = userContext.createGain();\r\n        this.filterLow = userContext.createBiquadFilter();\r\n        this.filterHigh = userContext.createBiquadFilter();\r\n        this.wet = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.filterLow);\r\n        this.activateNode.connect(this.dry);\r\n        this.filterLow.connect(this.filterHigh);\r\n        this.filterHigh.connect(this.convolver);\r\n        this.convolver.connect(this.wet);\r\n        this.wet.connect(this.output);\r\n        this.dry.connect(this.output);\r\n\r\n        this.dryLevel = initValue(properties.dryLevel, this.defaults.dryLevel.value);\r\n        this.wetLevel = initValue(properties.wetLevel, this.defaults.wetLevel.value);\r\n        this.highCut = properties.highCut || this.defaults.highCut.value;\r\n        this.buffer = properties.impulse || \"../impulses/ir_rev_short.wav\";\r\n        this.lowCut = properties.lowCut || this.defaults.lowCut.value;\r\n        this.level = initValue(properties.level, this.defaults.level.value);\r\n        this.filterHigh.type = \"lowpass\";\r\n        this.filterLow.type = \"highpass\";\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Convolver.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Convolver\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                highCut: {\r\n                    value: 22050,\r\n                    min: 20,\r\n                    max: 22050,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                lowCut: {\r\n                    value: 20,\r\n                    min: 20,\r\n                    max: 22050,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                dryLevel: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                wetLevel: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                level: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        lowCut: {\r\n            get: function() {\r\n                return this.filterLow.frequency;\r\n            },\r\n            set: function(value) {\r\n                this.filterLow.frequency.value = value;\r\n            }\r\n        },\r\n        highCut: {\r\n            get: function() {\r\n                return this.filterHigh.frequency;\r\n            },\r\n            set: function(value) {\r\n                this.filterHigh.frequency.value = value;\r\n            }\r\n        },\r\n        level: {\r\n            get: function() {\r\n                return this.output.gain;\r\n            },\r\n            set: function(value) {\r\n                this.output.gain.value = value;\r\n            }\r\n        },\r\n        dryLevel: {\r\n            get: function() {\r\n                return this.dry.gain;\r\n            },\r\n            set: function(value) {\r\n                this.dry.gain.value = value;\r\n            }\r\n        },\r\n        wetLevel: {\r\n            get: function() {\r\n                return this.wet.gain;\r\n            },\r\n            set: function(value) {\r\n                this.wet.gain.value = value;\r\n            }\r\n        },\r\n        buffer: {\r\n            enumerable: false,\r\n            get: function() {\r\n                return this.convolver.buffer;\r\n            },\r\n            set: function(impulse) {\r\n                var convolver = this.convolver,\r\n                    xhr = new XMLHttpRequest();\r\n                if (!impulse) {\r\n                    console.log(\"Tuna.Convolver.setBuffer: Missing impulse path!\");\r\n                    return;\r\n                }\r\n                xhr.open(\"GET\", impulse, true);\r\n                xhr.responseType = \"arraybuffer\";\r\n                xhr.onreadystatechange = function() {\r\n                    if (xhr.readyState === 4) {\r\n                        if (xhr.status < 300 && xhr.status > 199 || xhr.status === 302) {\r\n                            userContext.decodeAudioData(xhr.response, function(buffer) {\r\n                                convolver.buffer = buffer;\r\n                            }, function(e) {\r\n                                if (e) console.log(\"Tuna.Convolver.setBuffer: Error decoding data\" + e);\r\n                            });\r\n                        }\r\n                    }\r\n                };\r\n                xhr.send(null);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Delay = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.dry = userContext.createGain();\r\n        this.wet = userContext.createGain();\r\n        this.filter = userContext.createBiquadFilter();\r\n        this.delay = userContext.createDelay(10);\r\n        this.feedbackNode = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.delay);\r\n        this.activateNode.connect(this.dry);\r\n        this.delay.connect(this.filter);\r\n        this.filter.connect(this.feedbackNode);\r\n        this.feedbackNode.connect(this.delay);\r\n        this.feedbackNode.connect(this.wet);\r\n        this.wet.connect(this.output);\r\n        this.dry.connect(this.output);\r\n\r\n        this.delayTime = properties.delayTime || this.defaults.delayTime.value;\r\n        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\r\n        this.wetLevel = initValue(properties.wetLevel, this.defaults.wetLevel.value);\r\n        this.dryLevel = initValue(properties.dryLevel, this.defaults.dryLevel.value);\r\n        this.cutoff = properties.cutoff || this.defaults.cutoff.value;\r\n        this.filter.type = \"lowpass\";\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Delay.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Delay\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                delayTime: {\r\n                    value: 100,\r\n                    min: 20,\r\n                    max: 1000,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                feedback: {\r\n                    value: 0.45,\r\n                    min: 0,\r\n                    max: 0.9,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                cutoff: {\r\n                    value: 20000,\r\n                    min: 20,\r\n                    max: 20000,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                wetLevel: {\r\n                    value: 0.5,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                dryLevel: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        delayTime: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.delay.delayTime;\r\n            },\r\n            set: function(value) {\r\n                this.delay.delayTime.value = value / 1000;\r\n            }\r\n        },\r\n        wetLevel: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.wet.gain;\r\n            },\r\n            set: function(value) {\r\n                this.wet.gain.value = value;\r\n            }\r\n        },\r\n        dryLevel: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.dry.gain;\r\n            },\r\n            set: function(value) {\r\n                this.dry.gain.value = value;\r\n            }\r\n        },\r\n        feedback: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.feedbackNode.gain;\r\n            },\r\n            set: function(value) {\r\n                this.feedbackNode.gain.value = value;\r\n            }\r\n        },\r\n        cutoff: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.frequency;\r\n            },\r\n            set: function(value) {\r\n                this.filter.frequency.value = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Filter = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.filter = userContext.createBiquadFilter();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.filter);\r\n        this.filter.connect(this.output);\r\n\r\n        this.frequency = properties.frequency || this.defaults.frequency.value;\r\n        this.Q = properties.resonance || this.defaults.Q.value;\r\n        this.filterType = initValue(properties.filterType, this.defaults.filterType.value);\r\n        this.gain = initValue(properties.gain, this.defaults.gain.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Filter.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Filter\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                frequency: {\r\n                    value: 800,\r\n                    min: 20,\r\n                    max: 22050,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                Q: {\r\n                    value: 1,\r\n                    min: 0.001,\r\n                    max: 100,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                gain: {\r\n                    value: 0,\r\n                    min: -40,\r\n                    max: 40,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                filterType: {\r\n                    value: \"lowpass\",\r\n                    automatable: false,\r\n                    type: STRING\r\n                }\r\n            }\r\n        },\r\n        filterType: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.type;\r\n            },\r\n            set: function(value) {\r\n                this.filter.type = value;\r\n            }\r\n        },\r\n        Q: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.Q;\r\n            },\r\n            set: function(value) {\r\n                this.filter.Q.value = value;\r\n            }\r\n        },\r\n        gain: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.gain;\r\n            },\r\n            set: function(value) {\r\n                this.filter.gain.value = value;\r\n            }\r\n        },\r\n        frequency: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.frequency;\r\n            },\r\n            set: function(value) {\r\n                this.filter.frequency.value = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Gain = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.gainNode = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.gainNode);\r\n        this.gainNode.connect(this.output);\r\n\r\n        this.gain = initValue(properties.gain, this.defaults.gain.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Gain.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Gain\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                gain: {\r\n                    value: 1.0,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                }\r\n            }\r\n        },\r\n        gain: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.gainNode.gain;\r\n            },\r\n            set: function(value) {\r\n                this.gainNode.gain.value = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.MoogFilter = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.bufferSize = properties.bufferSize || this.defaults.bufferSize.value;\r\n\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.processor = userContext.createScriptProcessor(this.bufferSize, 1, 1);\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.processor);\r\n        this.processor.connect(this.output);\r\n\r\n        var in1, in2, in3, in4, out1, out2, out3, out4;\r\n        in1 = in2 = in3 = in4 = out1 = out2 = out3 = out4 = 0.0;\r\n        var input, output, f, fb, i, length, inputFactor;\r\n        this.processor.onaudioprocess = function(e) {\r\n            input = e.inputBuffer.getChannelData(0),\r\n                output = e.outputBuffer.getChannelData(0),\r\n                f = this.cutoff * 1.16,\r\n                inputFactor = 0.35013 * (f * f) * (f * f);\r\n            fb = this.resonance * (1.0 - 0.15 * f * f);\r\n            length = input.length;\r\n            for (i = 0; i < length; i++) {\r\n                input[i] -= out4 * fb;\r\n                input[i] *= inputFactor;\r\n                out1 = input[i] + 0.3 * in1 + (1 - f) * out1; // Pole 1\r\n                in1 = input[i];\r\n                out2 = out1 + 0.3 * in2 + (1 - f) * out2; // Pole 2\r\n                in2 = out1;\r\n                out3 = out2 + 0.3 * in3 + (1 - f) * out3; // Pole 3\r\n                in3 = out2;\r\n                out4 = out3 + 0.3 * in4 + (1 - f) * out4; // Pole 4\r\n                in4 = out3;\r\n                output[i] = out4;\r\n            }\r\n        };\r\n\r\n        this.cutoff = initValue(properties.cutoff, this.defaults.cutoff.value);\r\n        this.resonance = initValue(properties.resonance, this.defaults.resonance.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.MoogFilter.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"MoogFilter\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                bufferSize: {\r\n                    value: 4096,\r\n                    min: 256,\r\n                    max: 16384,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                cutoff: {\r\n                    value: 0.065,\r\n                    min: 0.0001,\r\n                    max: 1.0,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                resonance: {\r\n                    value: 3.5,\r\n                    min: 0.0,\r\n                    max: 4.0,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                }\r\n            }\r\n        },\r\n        cutoff: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.processor.cutoff;\r\n            },\r\n            set: function(value) {\r\n                this.processor.cutoff = value;\r\n            }\r\n        },\r\n        resonance: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.processor.resonance;\r\n            },\r\n            set: function(value) {\r\n                this.processor.resonance = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Overdrive = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.inputDrive = userContext.createGain();\r\n        this.waveshaper = userContext.createWaveShaper();\r\n        this.outputDrive = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.inputDrive);\r\n        this.inputDrive.connect(this.waveshaper);\r\n        this.waveshaper.connect(this.outputDrive);\r\n        this.outputDrive.connect(this.output);\r\n\r\n        this.ws_table = new Float32Array(this.k_nSamples);\r\n        this.drive = initValue(properties.drive, this.defaults.drive.value);\r\n        this.outputGain = initValue(properties.outputGain, this.defaults.outputGain.value);\r\n        this.curveAmount = initValue(properties.curveAmount, this.defaults.curveAmount.value);\r\n        this.algorithmIndex = initValue(properties.algorithmIndex, this.defaults.algorithmIndex.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Overdrive.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Overdrive\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                drive: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT,\r\n                    scaled: true\r\n                },\r\n                outputGain: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT,\r\n                    scaled: true\r\n                },\r\n                curveAmount: {\r\n                    value: 0.725,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                algorithmIndex: {\r\n                    value: 0,\r\n                    min: 0,\r\n                    max: 5,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        k_nSamples: {\r\n            value: 8192\r\n        },\r\n        drive: {\r\n            get: function() {\r\n                return this.inputDrive.gain;\r\n            },\r\n            set: function(value) {\r\n                this._drive = value;\r\n            }\r\n        },\r\n        curveAmount: {\r\n            get: function() {\r\n                return this._curveAmount;\r\n            },\r\n            set: function(value) {\r\n                this._curveAmount = value;\r\n                if (this._algorithmIndex === undefined) {\r\n                    this._algorithmIndex = 0;\r\n                }\r\n                this.waveshaperAlgorithms[this._algorithmIndex](this._curveAmount, this.k_nSamples, this.ws_table);\r\n                this.waveshaper.curve = this.ws_table;\r\n            }\r\n        },\r\n        outputGain: {\r\n            get: function() {\r\n                return this.outputDrive.gain;\r\n            },\r\n            set: function(value) {\r\n                this._outputGain = dbToWAVolume(value);\r\n            }\r\n        },\r\n        algorithmIndex: {\r\n            get: function() {\r\n                return this._algorithmIndex;\r\n            },\r\n            set: function(value) {\r\n                this._algorithmIndex = value;\r\n                this.curveAmount = this._curveAmount;\r\n            }\r\n        },\r\n        waveshaperAlgorithms: {\r\n            value: [\r\n                function(amount, n_samples, ws_table) {\r\n                    amount = Math.min(amount, 0.9999);\r\n                    var k = 2 * amount / (1 - amount),\r\n                        i, x;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        ws_table[i] = (1 + k) * x / (1 + k * Math.abs(x));\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) {\r\n                    var i, x, y;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        y = ((0.5 * Math.pow((x + 1.4), 2)) - 1) * y >= 0 ? 5.8 : 1.2;\r\n                        ws_table[i] = tanh(y);\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) {\r\n                    var i, x, y, a = 1 - amount;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        y = x < 0 ? -Math.pow(Math.abs(x), a + 0.04) : Math.pow(x, a);\r\n                        ws_table[i] = tanh(y * 2);\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) {\r\n                    var i, x, y, abx, a = 1 - amount > 0.99 ? 0.99 : 1 - amount;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        abx = Math.abs(x);\r\n                        if (abx < a) y = abx;\r\n                        else if (abx > a) y = a + (abx - a) / (1 + Math.pow((abx - a) / (1 - a), 2));\r\n                        else if (abx > 1) y = abx;\r\n                        ws_table[i] = sign(x) * y * (1 / ((a + 1) / 2));\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) { // fixed curve, amount doesn't do anything, the distortion is just from the drive\r\n                    var i, x;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        if (x < -0.08905) {\r\n                            ws_table[i] = (-3 / 4) * (1 - (Math.pow((1 - (Math.abs(x) - 0.032857)), 12)) + (1 / 3) * (Math.abs(x) - 0.032847)) + 0.01;\r\n                        } else if (x >= -0.08905 && x < 0.320018) {\r\n                            ws_table[i] = (-6.153 * (x * x)) + 3.9375 * x;\r\n                        } else {\r\n                            ws_table[i] = 0.630035;\r\n                        }\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) {\r\n                    var a = 2 + Math.round(amount * 14),\r\n                        // we go from 2 to 16 bits, keep in mind for the UI\r\n                        bits = Math.round(Math.pow(2, a - 1)),\r\n                        // real number of quantization steps divided by 2\r\n                        i, x;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        ws_table[i] = Math.round(x * bits) / bits;\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Panner = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.panner = userContext.createStereoPanner();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.panner);\r\n        this.panner.connect(this.output);\r\n\r\n        this.pan = initValue(properties.pan, this.defaults.pan.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Panner.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Panner\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                pan: {\r\n                    value: 0.0,\r\n                    min: -1.0,\r\n                    max: 1.0,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                }\r\n            }\r\n        },\r\n        pan: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.panner.pan;\r\n            },\r\n            set: function(value) {\r\n                this.panner.pan.value = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Phaser = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.splitter = this.activateNode = userContext.createChannelSplitter(2);\r\n        this.filtersL = [];\r\n        this.filtersR = [];\r\n        this.feedbackGainNodeL = userContext.createGain();\r\n        this.feedbackGainNodeR = userContext.createGain();\r\n        this.merger = userContext.createChannelMerger(2);\r\n        this.filteredSignal = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n        this.lfoL = new userInstance.LFO({\r\n            target: this.filtersL,\r\n            callback: this.callback\r\n        });\r\n        this.lfoR = new userInstance.LFO({\r\n            target: this.filtersR,\r\n            callback: this.callback\r\n        });\r\n\r\n        var i = this.stage;\r\n        while (i--) {\r\n            this.filtersL[i] = userContext.createBiquadFilter();\r\n            this.filtersR[i] = userContext.createBiquadFilter();\r\n            this.filtersL[i].type = \"allpass\";\r\n            this.filtersR[i].type = \"allpass\";\r\n        }\r\n        this.input.connect(this.splitter);\r\n        this.input.connect(this.output);\r\n        this.splitter.connect(this.filtersL[0], 0, 0);\r\n        this.splitter.connect(this.filtersR[0], 1, 0);\r\n        this.connectInOrder(this.filtersL);\r\n        this.connectInOrder(this.filtersR);\r\n        this.filtersL[this.stage - 1].connect(this.feedbackGainNodeL);\r\n        this.filtersL[this.stage - 1].connect(this.merger, 0, 0);\r\n        this.filtersR[this.stage - 1].connect(this.feedbackGainNodeR);\r\n        this.filtersR[this.stage - 1].connect(this.merger, 0, 1);\r\n        this.feedbackGainNodeL.connect(this.filtersL[0]);\r\n        this.feedbackGainNodeR.connect(this.filtersR[0]);\r\n        this.merger.connect(this.output);\r\n\r\n        this.rate = initValue(properties.rate, this.defaults.rate.value);\r\n        this.baseModulationFrequency = properties.baseModulationFrequency || this.defaults.baseModulationFrequency.value;\r\n        this.depth = initValue(properties.depth, this.defaults.depth.value);\r\n        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\r\n        this.stereoPhase = initValue(properties.stereoPhase, this.defaults.stereoPhase.value);\r\n\r\n        this.lfoL.activate(true);\r\n        this.lfoR.activate(true);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Phaser.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Phaser\"\r\n        },\r\n        stage: {\r\n            value: 4\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                rate: {\r\n                    value: 0.1,\r\n                    min: 0,\r\n                    max: 8,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                depth: {\r\n                    value: 0.6,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                feedback: {\r\n                    value: 0.7,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                stereoPhase: {\r\n                    value: 40,\r\n                    min: 0,\r\n                    max: 180,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                baseModulationFrequency: {\r\n                    value: 700,\r\n                    min: 500,\r\n                    max: 1500,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        callback: {\r\n            value: function(filters, value) {\r\n                for (var stage = 0; stage < 4; stage++) {\r\n                    filters[stage].frequency.value = value;\r\n                }\r\n            }\r\n        },\r\n        depth: {\r\n            get: function() {\r\n                return this._depth;\r\n            },\r\n            set: function(value) {\r\n                this._depth = value;\r\n                this.lfoL.oscillation = this._baseModulationFrequency * this._depth;\r\n                this.lfoR.oscillation = this._baseModulationFrequency * this._depth;\r\n            }\r\n        },\r\n        rate: {\r\n            get: function() {\r\n                return this._rate;\r\n            },\r\n            set: function(value) {\r\n                this._rate = value;\r\n                this.lfoL.frequency = this._rate;\r\n                this.lfoR.frequency = this._rate;\r\n            }\r\n        },\r\n        baseModulationFrequency: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._baseModulationFrequency;\r\n            },\r\n            set: function(value) {\r\n                this._baseModulationFrequency = value;\r\n                this.lfoL.offset = this._baseModulationFrequency;\r\n                this.lfoR.offset = this._baseModulationFrequency;\r\n                this._depth = this._depth;\r\n            }\r\n        },\r\n        feedback: {\r\n            get: function() {\r\n                return this._feedback;\r\n            },\r\n            set: function(value) {\r\n                this._feedback = value;\r\n                this.feedbackGainNodeL.gain.value = this._feedback;\r\n                this.feedbackGainNodeR.gain.value = this._feedback;\r\n            }\r\n        },\r\n        stereoPhase: {\r\n            get: function() {\r\n                return this._stereoPhase;\r\n            },\r\n            set: function(value) {\r\n                this._stereoPhase = value;\r\n                var newPhase = this.lfoL._phase + this._stereoPhase * Math.PI / 180;\r\n                newPhase = fmod(newPhase, 2 * Math.PI);\r\n                this.lfoR._phase = newPhase;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.PingPongDelay = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.wet = userContext.createGain();\r\n        this.stereoToMonoMix = userContext.createGain();\r\n        this.feedbackLevel = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n        this.delayLeft = userContext.createDelay(10);\r\n        this.delayRight = userContext.createDelay(10);\r\n\r\n        this.activateNode = userContext.createGain();\r\n        this.splitter = userContext.createChannelSplitter(2);\r\n        this.merger = userContext.createChannelMerger(2);\r\n\r\n        this.activateNode.connect(this.splitter);\r\n        this.splitter.connect(this.stereoToMonoMix, 0, 0);\r\n        this.splitter.connect(this.stereoToMonoMix, 1, 0);\r\n        this.stereoToMonoMix.gain.value = .5;\r\n        this.stereoToMonoMix.connect(this.wet);\r\n        this.wet.connect(this.delayLeft);\r\n        this.feedbackLevel.connect(this.wet);\r\n        this.delayLeft.connect(this.delayRight);\r\n        this.delayRight.connect(this.feedbackLevel);\r\n        this.delayLeft.connect(this.merger, 0, 0);\r\n        this.delayRight.connect(this.merger, 0, 1);\r\n        this.merger.connect(this.output);\r\n        this.activateNode.connect(this.output);\r\n\r\n        this.delayTimeLeft = properties.delayTimeLeft !== undefined ? properties.delayTimeLeft : this.defaults.delayTimeLeft.value;\r\n        this.delayTimeRight = properties.delayTimeRight !== undefined ? properties.delayTimeRight : this.defaults.delayTimeRight.value;\r\n        this.feedbackLevel.gain.value = properties.feedback !== undefined ? properties.feedback : this.defaults.feedback.value;\r\n        this.wet.gain.value = properties.wetLevel !== undefined ? properties.wetLevel : this.defaults.wetLevel.value;\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.PingPongDelay.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"PingPongDelay\"\r\n        },\r\n        delayTimeLeft: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._delayTimeLeft;\r\n            },\r\n            set: function(value) {\r\n                this._delayTimeLeft = value;\r\n                this.delayLeft.delayTime.value = value / 1000;\r\n            }\r\n        },\r\n        delayTimeRight: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._delayTimeRight;\r\n            },\r\n            set: function(value) {\r\n                this._delayTimeRight = value;\r\n                this.delayRight.delayTime.value = value / 1000;\r\n            }\r\n        },\r\n        wetLevel: {\r\n            enumerable: true,\r\n            get: function () {\r\n                return this.wet.gain;\r\n            },\r\n            set: function (value) {\r\n                this.wet.gain.value = value;\r\n            }\r\n        }, \r\n        feedback: {\r\n            enumerable: true,\r\n            get: function () {\r\n                return this.feedbackLevel.gain;\r\n            },\r\n            set: function (value) {\r\n                this.feedbackLevel.gain.value = value;\r\n            }\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                delayTimeLeft: {\r\n                    value: 200,\r\n                    min: 1,\r\n                    max: 10000,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                delayTimeRight: {\r\n                    value: 400,\r\n                    min: 1,\r\n                    max: 10000,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                feedback: {\r\n                    value: 0.3,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                wetLevel: {\r\n                    value: 0.5,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Tremolo = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.splitter = this.activateNode = userContext.createChannelSplitter(\r\n                2),\r\n            this.amplitudeL = userContext.createGain(),\r\n            this.amplitudeR = userContext.createGain(),\r\n            this.merger = userContext.createChannelMerger(2),\r\n            this.output = userContext.createGain();\r\n        this.lfoL = new userInstance.LFO({\r\n            target: this.amplitudeL.gain,\r\n            callback: pipe\r\n        });\r\n        this.lfoR = new userInstance.LFO({\r\n            target: this.amplitudeR.gain,\r\n            callback: pipe\r\n        });\r\n\r\n        this.input.connect(this.splitter);\r\n        this.splitter.connect(this.amplitudeL, 0);\r\n        this.splitter.connect(this.amplitudeR, 1);\r\n        this.amplitudeL.connect(this.merger, 0, 0);\r\n        this.amplitudeR.connect(this.merger, 0, 1);\r\n        this.merger.connect(this.output);\r\n\r\n        this.rate = properties.rate || this.defaults.rate.value;\r\n        this.intensity = initValue(properties.intensity, this.defaults.intensity.value);\r\n        this.stereoPhase = initValue(properties.stereoPhase, this.defaults.stereoPhase.value);\r\n\r\n        this.lfoL.offset = 1 - (this.intensity / 2);\r\n        this.lfoR.offset = 1 - (this.intensity / 2);\r\n        this.lfoL.phase = this.stereoPhase * Math.PI / 180;\r\n\r\n        this.lfoL.activate(true);\r\n        this.lfoR.activate(true);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Tremolo.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Tremolo\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                intensity: {\r\n                    value: 0.3,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                stereoPhase: {\r\n                    value: 0,\r\n                    min: 0,\r\n                    max: 180,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                rate: {\r\n                    value: 5,\r\n                    min: 0.1,\r\n                    max: 11,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        intensity: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._intensity;\r\n            },\r\n            set: function(value) {\r\n                this._intensity = value;\r\n                this.lfoL.offset = 1 - this._intensity / 2;\r\n                this.lfoR.offset = 1 - this._intensity / 2;\r\n                this.lfoL.oscillation = this._intensity;\r\n                this.lfoR.oscillation = this._intensity;\r\n            }\r\n        },\r\n        rate: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._rate;\r\n            },\r\n            set: function(value) {\r\n                this._rate = value;\r\n                this.lfoL.frequency = this._rate;\r\n                this.lfoR.frequency = this._rate;\r\n            }\r\n        },\r\n        stereoPhase: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._stereoPhase;\r\n            },\r\n            set: function(value) {\r\n                this._stereoPhase = value;\r\n                var newPhase = this.lfoL._phase + this._stereoPhase * Math.PI / 180;\r\n                newPhase = fmod(newPhase, 2 * Math.PI);\r\n                this.lfoR.phase = newPhase;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.WahWah = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.envelopeFollower = new userInstance.EnvelopeFollower({\r\n            target: this,\r\n            callback: function(context, value) {\r\n                context.sweep = value;\r\n            }\r\n        });\r\n        this.filterBp = userContext.createBiquadFilter();\r\n        this.filterPeaking = userContext.createBiquadFilter();\r\n        this.output = userContext.createGain();\r\n\r\n        //Connect AudioNodes\r\n        this.activateNode.connect(this.filterBp);\r\n        this.filterBp.connect(this.filterPeaking);\r\n        this.filterPeaking.connect(this.output);\r\n\r\n        //Set Properties\r\n        this.init();\r\n        this.automode = initValue(properties.automode, this.defaults.automode.value);\r\n        this.resonance = properties.resonance || this.defaults.resonance.value;\r\n        this.sensitivity = initValue(properties.sensitivity, this.defaults.sensitivity.value);\r\n        this.baseFrequency = initValue(properties.baseFrequency, this.defaults.baseFrequency.value);\r\n        this.excursionOctaves = properties.excursionOctaves || this.defaults.excursionOctaves.value;\r\n        this.sweep = initValue(properties.sweep, this.defaults.sweep.value);\r\n\r\n        this.activateNode.gain.value = 2;\r\n        this.envelopeFollower.activate(true);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.WahWah.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"WahWah\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                automode: {\r\n                    value: true,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                baseFrequency: {\r\n                    value: 0.5,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                excursionOctaves: {\r\n                    value: 2,\r\n                    min: 1,\r\n                    max: 6,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                sweep: {\r\n                    value: 0.2,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                resonance: {\r\n                    value: 10,\r\n                    min: 1,\r\n                    max: 100,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                sensitivity: {\r\n                    value: 0.5,\r\n                    min: -1,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        automode: {\r\n            get: function() {\r\n                return this._automode;\r\n            },\r\n            set: function(value) {\r\n                this._automode = value;\r\n                if (value) {\r\n                    this.activateNode.connect(this.envelopeFollower.input);\r\n                    this.envelopeFollower.activate(true);\r\n                } else {\r\n                    this.envelopeFollower.activate(false);\r\n                    this.activateNode.disconnect();\r\n                    this.activateNode.connect(this.filterBp);\r\n                }\r\n            }\r\n        },\r\n        filterFreqTimeout: {\r\n            value: 0\r\n        },\r\n        setFilterFreq: {\r\n            value: function() {\r\n                try {\r\n                    this.filterBp.frequency.value = Math.min(22050, this._baseFrequency + this._excursionFrequency * this._sweep);\r\n                    this.filterPeaking.frequency.value = Math.min(22050, this._baseFrequency + this._excursionFrequency * this._sweep);\r\n                } catch (e) {\r\n                    clearTimeout(this.filterFreqTimeout);\r\n                    //put on the next cycle to let all init properties be set\r\n                    this.filterFreqTimeout = setTimeout(function() {\r\n                        this.setFilterFreq();\r\n                    }.bind(this), 0);\r\n                }\r\n            }\r\n        },\r\n        sweep: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._sweep;\r\n            },\r\n            set: function(value) {\r\n                this._sweep = Math.pow(value > 1 ? 1 : value < 0 ? 0 : value, this._sensitivity);\r\n                this.setFilterFreq();\r\n            }\r\n        },\r\n        baseFrequency: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._baseFrequency;\r\n            },\r\n            set: function(value) {\r\n                this._baseFrequency = 50 * Math.pow(10, value * 2);\r\n                this._excursionFrequency = Math.min(userContext.sampleRate / 2, this.baseFrequency * Math.pow(2, this._excursionOctaves));\r\n                this.setFilterFreq();\r\n            }\r\n        },\r\n        excursionOctaves: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._excursionOctaves;\r\n            },\r\n            set: function(value) {\r\n                this._excursionOctaves = value;\r\n                this._excursionFrequency = Math.min(userContext.sampleRate / 2, this.baseFrequency * Math.pow(2, this._excursionOctaves));\r\n                this.setFilterFreq();\r\n            }\r\n        },\r\n        sensitivity: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._sensitivity;\r\n            },\r\n            set: function(value) {\r\n                this._sensitivity = Math.pow(10, value);\r\n            }\r\n        },\r\n        resonance: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._resonance;\r\n            },\r\n            set: function(value) {\r\n                this._resonance = value;\r\n                this.filterPeaking.Q = this._resonance;\r\n            }\r\n        },\r\n        init: {\r\n            value: function() {\r\n                this.output.gain.value = 1;\r\n                this.filterPeaking.type = \"peaking\";\r\n                this.filterBp.type = \"bandpass\";\r\n                this.filterPeaking.frequency.value = 100;\r\n                this.filterPeaking.gain.value = 20;\r\n                this.filterPeaking.Q.value = 5;\r\n                this.filterBp.frequency.value = 100;\r\n                this.filterBp.Q.value = 1;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.EnvelopeFollower = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.jsNode = this.output = userContext.createScriptProcessor(this.buffersize, 1, 1);\r\n\r\n        this.input.connect(this.output);\r\n\r\n        this.attackTime = initValue(properties.attackTime, this.defaults.attackTime.value);\r\n        this.releaseTime = initValue(properties.releaseTime, this.defaults.releaseTime.value);\r\n        this._envelope = 0;\r\n        this.target = properties.target || {};\r\n        this.callback = properties.callback || function() {};\r\n\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.EnvelopeFollower.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"EnvelopeFollower\"\r\n        },\r\n        defaults: {\r\n            value: {\r\n                attackTime: {\r\n                    value: 0.003,\r\n                    min: 0,\r\n                    max: 0.5,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                releaseTime: {\r\n                    value: 0.5,\r\n                    min: 0,\r\n                    max: 0.5,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        buffersize: {\r\n            value: 256\r\n        },\r\n        envelope: {\r\n            value: 0\r\n        },\r\n        sampleRate: {\r\n            value: 44100\r\n        },\r\n        attackTime: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._attackTime;\r\n            },\r\n            set: function(value) {\r\n                this._attackTime = value;\r\n                this._attackC = Math.exp(-1 / this._attackTime * this.sampleRate / this.buffersize);\r\n            }\r\n        },\r\n        releaseTime: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._releaseTime;\r\n            },\r\n            set: function(value) {\r\n                this._releaseTime = value;\r\n                this._releaseC = Math.exp(-1 / this._releaseTime * this.sampleRate / this.buffersize);\r\n            }\r\n        },\r\n        callback: {\r\n            get: function() {\r\n                return this._callback;\r\n            },\r\n            set: function(value) {\r\n                if (typeof value === \"function\") {\r\n                    this._callback = value;\r\n                } else {\r\n                    console.error(\"tuna.js: \" + this.name + \": Callback must be a function!\");\r\n                }\r\n            }\r\n        },\r\n        target: {\r\n            get: function() {\r\n                return this._target;\r\n            },\r\n            set: function(value) {\r\n                this._target = value;\r\n            }\r\n        },\r\n        activate: {\r\n            value: function(doActivate) {\r\n                this.activated = doActivate;\r\n                if (doActivate) {\r\n                    this.jsNode.connect(userContext.destination);\r\n                    this.jsNode.onaudioprocess = this.returnCompute(this);\r\n                } else {\r\n                    this.jsNode.disconnect();\r\n                    this.jsNode.onaudioprocess = null;\r\n                }\r\n                if (this.activateCallback) {\r\n                    this.activateCallback(doActivate);\r\n                }\r\n            }\r\n        },\r\n        returnCompute: {\r\n            value: function(instance) {\r\n                return function(event) {\r\n                    instance.compute(event);\r\n                };\r\n            }\r\n        },\r\n        compute: {\r\n            value: function(event) {\r\n                var count = event.inputBuffer.getChannelData(0).length,\r\n                    channels = event.inputBuffer.numberOfChannels,\r\n                    current, chan, rms, i;\r\n                chan = rms = i = 0;\r\n                if (channels > 1) { //need to mixdown\r\n                    for (i = 0; i < count; ++i) {\r\n                        for (; chan < channels; ++chan) {\r\n                            current = event.inputBuffer.getChannelData(chan)[i];\r\n                            rms += (current * current) / channels;\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (i = 0; i < count; ++i) {\r\n                        current = event.inputBuffer.getChannelData(0)[i];\r\n                        rms += (current * current);\r\n                    }\r\n                }\r\n                rms = Math.sqrt(rms);\r\n\r\n                if (this._envelope < rms) {\r\n                    this._envelope *= this._attackC;\r\n                    this._envelope += (1 - this._attackC) * rms;\r\n                } else {\r\n                    this._envelope *= this._releaseC;\r\n                    this._envelope += (1 - this._releaseC) * rms;\r\n                }\r\n                this._callback(this._target, this._envelope);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.LFO = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n\r\n        //Instantiate AudioNode\r\n        this.input = userContext.createGain();\r\n        this.output = userContext.createScriptProcessor(256, 1, 1);\r\n        this.activateNode = userContext.destination;\r\n\r\n        //Set Properties\r\n        this.frequency = initValue(properties.frequency, this.defaults.frequency.value);\r\n        this.offset = initValue(properties.offset, this.defaults.offset.value);\r\n        this.oscillation = initValue(properties.oscillation, this.defaults.oscillation.value);\r\n        this.phase = initValue(properties.phase, this.defaults.phase.value);\r\n        this.target = properties.target || {};\r\n        this.output.onaudioprocess = this.callback(properties.callback || function() {});\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.LFO.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"LFO\"\r\n        },\r\n        bufferSize: {\r\n            value: 256\r\n        },\r\n        sampleRate: {\r\n            value: 44100\r\n        },\r\n        defaults: {\r\n            value: {\r\n                frequency: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 20,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                offset: {\r\n                    value: 0.85,\r\n                    min: 0,\r\n                    max: 22049,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                oscillation: {\r\n                    value: 0.3,\r\n                    min: -22050,\r\n                    max: 22050,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                phase: {\r\n                    value: 0,\r\n                    min: 0,\r\n                    max: 2 * Math.PI,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        frequency: {\r\n            get: function() {\r\n                return this._frequency;\r\n            },\r\n            set: function(value) {\r\n                this._frequency = value;\r\n                this._phaseInc = 2 * Math.PI * this._frequency * this.bufferSize / this.sampleRate;\r\n            }\r\n        },\r\n        offset: {\r\n            get: function() {\r\n                return this._offset;\r\n            },\r\n            set: function(value) {\r\n                this._offset = value;\r\n            }\r\n        },\r\n        oscillation: {\r\n            get: function() {\r\n                return this._oscillation;\r\n            },\r\n            set: function(value) {\r\n                this._oscillation = value;\r\n            }\r\n        },\r\n        phase: {\r\n            get: function() {\r\n                return this._phase;\r\n            },\r\n            set: function(value) {\r\n                this._phase = value;\r\n            }\r\n        },\r\n        target: {\r\n            get: function() {\r\n                return this._target;\r\n            },\r\n            set: function(value) {\r\n                this._target = value;\r\n            }\r\n        },\r\n        activate: {\r\n            value: function(doActivate) {\r\n                if (doActivate) {\r\n                    this.output.connect(userContext.destination);\r\n                    if (this.activateCallback) {\r\n                        this.activateCallback(doActivate);\r\n                    }\r\n                } else {\r\n                    this.output.disconnect();\r\n                }\r\n            }\r\n        },\r\n        callback: {\r\n            value: function(callback) {\r\n                var that = this;\r\n                return function() {\r\n                    that._phase += that._phaseInc;\r\n                    if (that._phase > 2 * Math.PI) {\r\n                        that._phase = 0;\r\n                    }\r\n                    callback(that._target, that._offset + that._oscillation * Math.sin(that._phase));\r\n                };\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.toString = Tuna.prototype.toString = function() {\r\n        return \"Please visit https://github.com/Theodeus/tuna/wiki for instructions on how to use Tuna.js\";\r\n    };\r\n})();\r\n","// source: https://webaudiotech.com/sites/limiter_comparison/oscilloscope.js\n\nconst MINVAL = 1234;\t// height/2 == zero.\tMINVAL is the \"minimum detected signal\" level.\n\nfunction findFirstPositiveZeroCrossing(buf, buflen, height) {\n\tvar i = 0;\n\tvar last_zero = -1;\n\tvar t;\n\n\t// advance until we're zero or negative\n\twhile (i<buflen && (buf[i] > height/2 ) )\n\t\ti++;\n\n\tif (i>=buflen)\n\t\treturn 0;\n\n\t// advance until we're above MINVAL, keeping track of last zero.\n\twhile (i<buflen && ((t=buf[i]) < MINVAL )) {\n\t\tif (t >= height/2) {\n\t\t\tif (last_zero == -1)\n\t\t\t\tlast_zero = i;\n\t\t} else\n\t\t\tlast_zero = -1;\n\t\ti++;\n\t}\n\n\t// we may have jumped over MINVAL in one sample.\n\tif (last_zero == -1)\n\t\tlast_zero = i;\n\n\tif (i==buflen)\t// We didn't find any positive zero crossings\n\t\treturn 0;\n\n\t// The first sample might be a zero.\tIf so, return it.\n\tif (last_zero == 0)\n\t\treturn 0;\n\n\treturn last_zero;\n}\n\nfunction createNode (ac) {\n  const node = ac.createAnalyser()\n  node.fftSize = 1024\n  return node\n}\n\nfunction createRenderFunc (node, canvas) {\n  const data = new Uint8Array(canvas.width)\n  const context = canvas.getContext('2d')\n\n  return function () {\n    const { width, height } = canvas\n\n\t  node.getByteTimeDomainData(data);\n\n    context.fillStyle = 'hsl(250, 20%, 20%)'\n    context.fillRect(0, 0, width, height)\n\n\n    // draw the oscilloscope path\n    context.lineWidth = 1\n    context.strokeStyle = 'white'\n    context.beginPath()\n    const c = width / (node.fftSize/2)\n\n    var zeroCross = findFirstPositiveZeroCrossing(data, width, height);\n\t  if (zeroCross==0) zeroCross=1;\n    \n\t  for (var i=zeroCross, j=0; j<(width-zeroCross); i++, j++) {\n\t\t  context.lineTo(j,height-( c *data[i]));\n    }\n\n\t  context.stroke();\n  }\n}\n\nfunction renderLoop (node, canvas) {\n  let animFrameId\n  \n  const renderFunc = createRenderFunc(node, canvas)\n  \n  function loop () {\n    renderFunc()    \n    animFrameId = requestAnimationFrame(loop)\n  }\n  \n  loop()\n}\n\nmodule.exports = {\n  createNode,\n  createRenderFunc,\n  renderLoop\n}\n","import './main.css'\n\nimport reverbImpulse from './impulses/Basement.m4a'\nimport guitarImpulse from './impulses/impulse_guitar.wav'\nimport defs from './defs'\n\nconst {\n  connectAll,\n  createNodes,\n  setParams,\n  paramTimeline,\n  num,\n  rand\n} = require('wakit')\n\nconst Tuna = require('tunajs')\n\nif (!window.ac) { window.ac = new AudioContext() }\nconst { ac } = window\n\nconst tuna = new Tuna(ac)\nconst master = setParams(ac.createGain(), {\n  gain: 1.0\n})\n\nconst convolver = new tuna.Convolver({\n  highCut: 22050,\n  lowCut: 20,\n  dryLevel: .2,\n  wetLevel: .8,\n  level: .5,\n  impulse: reverbImpulse,\n  bypass: 0\n});\n\nconst delay = new tuna.PingPongDelay({\n  wetLevel: .7,\n  feedback: .5,\n  delayTimeLeft: 150,\n  delayTimeRight: 200\n})\n\nconst cabinet = new tuna.Cabinet({\n  impulsePath: guitarImpulse,\n  makeupGain: 10\n})\n\nconst overdrive = new tuna.Overdrive({\n  outputGain: .5,\n  drive: .3,\n  curveAmount: .7,\n  algorithmIndex: 0\n})\n\nconst chorus = new tuna.Chorus({\n  rate: 5.5,\n  feedback: 0.8,\n  delay: 0.045,\n  bypass: 0\n})\n\nconst phaser = new tuna.Phaser({\n  rate: 3.2,\n  depth: 0.3,\n  feedback: 0.4,\n  stereoPhase: 30,\n  baseModulationFrequency: 700,\n  bypass: 0\n})\n\nconst compressor = setParams(ac.createDynamicsCompressor(), {\n  threshold: 0,\n  knee: 0,\n  reduction: 20.0,\n  ratio: 10,\n  attack: 1.0,\n  release: 1.0\n})\n\nconnectAll(\n  phaser,\n  master\n)\n\nconnectAll(\n  cabinet,\n  overdrive,\n  master\n)\n\nconnectAll(\n  chorus,\n  master\n)\n\nconnectAll(\n  master,\n  convolver,\n  delay,\n  compressor,\n  ac.destination\n)\n\n// ----\n\nconst scope = require('./osc-scope')\nconst scopeNode = scope.createNode(ac)\nconst scopeCanvas = document.querySelector('.scope')\n\nscope.renderLoop(scopeNode, scopeCanvas)\n\nmaster.connect(scopeNode)\n\n// ----\n\nconst muteCheckbox = document.querySelector('.mute input[type=checkbox]')\nconst muteText = document.querySelector('.mute .text')\nmuteCheckbox.addEventListener('change', (event) => {\n  const isMuted = muteCheckbox.checked\n\n  muteText.innerHTML = isMuted ? 'unmute' : 'mute'\n  setParams(master, {\n      gain: isMuted ? 0 : 1\n  })\n})\n\n\n// ----\n\nlet lastTime\nlet detuneSource1 = ac.createConstantSource()\ndetuneSource1.start()\n\nsetInterval(() => {\n  if (ac.currentTime < lastTime) { return }\n\n  const fn = defs[2]\n  const props = {\n    time: ac.currentTime,\n    duration: rand.inRange(10, 20),\n    detune: rand.from([ 0, 1200, 2400 ])\n  }\n\n  play(fn, props, detuneSource1)\n  play(fn, {\n    time: ac.currentTime + 3,\n    duration: rand.inRange(10, 20),\n    detune: rand.from([ 700, 1200 + 700 ])\n  }, detuneSource1)\n\n  lastTime = props.time + props.duration\n}, 1000)\n\n\nlet lastTime2\nlet detuneSource2 = ac.createConstantSource()\ndetuneSource2.start()\n\nsetInterval(() => {\n  if (ac.currentTime < lastTime2) { return }\n\n  const key = rand.inRange(0, 1)\n  const fn = defs[key]\n  const props = {\n    time: ac.currentTime,\n    duration: rand.inRange(10, 20),\n    detune: rand.from([ 0, 1200 ])\n  }\n\n  const dest = rand.from([ cabinet, chorus, phaser ])\n  play(fn, props, detuneSource2, dest)\n  play(fn, {\n    ...props,\n    detune: props.detune + 1\n  }, detuneSource2, dest)\n  \n  lastTime2 = props.time + props.duration\n}, 500)\n\nlet lastTime3\nlet detuneSource3 = ac.createConstantSource()\ndetuneSource3.start()\n\nsetInterval(() => {\n  if (ac.currentTime < lastTime) { return }\n\n  const fn = defs[3]\n  const props = {\n    time: ac.currentTime,\n    duration: rand.inRange(10, 20),\n    detune: rand.from([ 0, 1200 ])\n  }\n\n  play(fn, props, detuneSource1)\n  play(fn, {\n    time: ac.currentTime + 3,\n    duration: rand.inRange(10, 20),\n    detune: rand.from([ 700, 1200 + 700 ])\n  }, detuneSource3)\n\n  lastTime = props.time + props.duration\n}, 1000)\n\n// ----\n\nconst notes = window.notes = {}\nlet noteSeq = 0\n\nfunction play (fn, props, detuneSource, dest) {\n  const note = connectAll(\n    fn(props, detuneSource),\n    dest || rand.from([ cabinet, chorus, phaser ])\n  )\n\n  const {\n    duration,\n    time\n  } = props\n\n  note.start(time)\n  note.stop(time + duration)\n\n  const id = ++noteSeq\n  notes[id] = note\n  setTimeout(() => {\n    delete notes[id]\n  }, duration * 1000)\n}\n\nsetInterval(() => {\n  const amount = rand.from([0, -200])\n  const duration = 10\n  detuneSource1.offset.linearRampToValueAtTime(amount, ac.currentTime + duration)\n}, 39000)\n\nsetInterval(() => {\n  const amount = rand.from([0, -200])\n  const duration = 10\n  detuneSource2.offset.linearRampToValueAtTime(amount, ac.currentTime + duration)\n}, 53000)\n\nsetInterval(() => {\n  const amount = rand.from([0, -200])\n  const duration = 10\n  detuneSource3.offset.linearRampToValueAtTime(amount, ac.currentTime + duration)\n}, 51000)\n"]}