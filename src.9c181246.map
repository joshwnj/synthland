{"version":3,"sources":["../node_modules/wakit/src/connectAll.js","../node_modules/wakit/src/setParams.js","../node_modules/wakit/src/createNodes.js","../node_modules/wakit/src/num.js","../node_modules/wakit/src/paramTimeline.js","../node_modules/wakit/src/rand.js","../node_modules/wakit/src/index.js","audio-components.js","../node_modules/frequency-to-midi-note-number/index.js","defs.js","../node_modules/tunajs/tuna.js","osc-scope.js","index.js","../node_modules/parcel/src/builtins/bundle-url.js","../node_modules/parcel/src/builtins/css-loader.js"],"names":["require","connectAll","createNodes","setParams","paramTimeline","num","rand","seq","Filter","props","children","_id","node","ac","createBiquadFilter","forEach","ch","connect","update","params","key","undefined","updateParam","type","value","Array","isArray","v","push","dest","disconnect","time","start","stop","frequency","gain","Q","Osc","nodes","osc","amp","ConstantSourceNode","disconnected","i","threshold","id","setInterval","clearInterval","detune","Env","param","currentTime","finalTime","from","linearTo","to","duration","attack","release","Infinity","cancelScheduledValues","module","exports","frequencyToMidiNoteNumber","Math","round","log2","noteToFreq","note","pow","freqToNote","window","AudioContext","oscTypes","defs","detuneSource","freqFactor","gainFactor","gainK","floatInRange","inRange","MINVAL","findFirstPositiveZeroCrossing","buf","buflen","height","last_zero","t","createNode","createAnalyser","fftSize","createRenderFunc","canvas","data","Uint8Array","width","context","getContext","getByteTimeDomainData","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","c","zeroCross","j","lineTo","stroke","renderLoop","animFrameId","renderFunc","loop","requestAnimationFrame","Tuna","tuna","master","createGain","convolver","Convolver","highCut","lowCut","dryLevel","wetLevel","level","impulse","reverbImpulse","bypass","delay","PingPongDelay","feedback","delayTimeLeft","delayTimeRight","cabinet","Cabinet","impulsePath","guitarImpulse","makeupGain","overdrive","Overdrive","outputGain","drive","curveAmount","algorithmIndex","chorus","Chorus","rate","phaser","Phaser","depth","stereoPhase","baseModulationFrequency","compressor","createDynamicsCompressor","knee","reduction","ratio","destination","scope","scopeNode","scopeCanvas","document","querySelector","muteCheckbox","muteText","addEventListener","updateMute","onKeyDown","event","checked","isMuted","innerHTML","lastTime","detuneSource1","createConstantSource","fn","play","lastTime2","detuneSource2","lastTime3","detuneSource3","notes","noteSeq","setTimeout","amount","offset","linearRampToValueAtTime","bundleURL","getBundleURLCached","getBundleURL","Error","err","matches","stack","match","getBaseURL","url","replace","bundle","updateLink","link","newLink","cloneNode","onload","remove","href","split","Date","now","parentNode","insertBefore","nextSibling","cssTimeout","reloadCSS","links","querySelectorAll","length"],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7tEA;;AAEA,IAAMyB,SAAS,IAAf,EAAqB;;AAErB,SAASC,6BAAT,CAAuCC,GAAvC,EAA4CC,MAA5C,EAAoDC,MAApD,EAA4D;AAC3D,MAAI1C,IAAI,CAAR;AACA,MAAI2C,YAAY,CAAC,CAAjB;AACA,MAAIC,CAAJ;;AAEA;AACA,SAAO5C,IAAEyC,MAAF,IAAaD,IAAIxC,CAAJ,IAAS0C,SAAO,CAApC;AACC1C;AADD,GAGA,IAAIA,KAAGyC,MAAP,EACC,OAAO,CAAP;;AAED;AACA,SAAOzC,IAAEyC,MAAF,IAAa,CAACG,IAAEJ,IAAIxC,CAAJ,CAAH,IAAasC,MAAjC,EAA2C;AAC1C,QAAIM,KAAKF,SAAO,CAAhB,EAAmB;AAClB,UAAIC,aAAa,CAAC,CAAlB,EACCA,YAAY3C,CAAZ;AACD,KAHD,MAIC2C,YAAY,CAAC,CAAb;AACD3C;AACA;;AAED;AACA,MAAI2C,aAAa,CAAC,CAAlB,EACCA,YAAY3C,CAAZ;;AAED,MAAIA,KAAGyC,MAAP,EAAe;AACd,WAAO,CAAP;;AAED;AACA,MAAIE,aAAa,CAAjB,EACC,OAAO,CAAP;;AAED,SAAOA,SAAP;AACA;;AAED,SAASE,UAAT,CAAqB3E,EAArB,EAAyB;AACvB,MAAMD,OAAOC,GAAG4E,cAAH,EAAb;AACA7E,OAAK8E,OAAL,GAAe,IAAf;AACA,SAAO9E,IAAP;AACD;;AAED,SAAS+E,gBAAT,CAA2B/E,IAA3B,EAAiCgF,MAAjC,EAAyC;AACvC,MAAMC,OAAO,IAAIC,UAAJ,CAAeF,OAAOG,KAAtB,CAAb;AACA,MAAMC,UAAUJ,OAAOK,UAAP,CAAkB,IAAlB,CAAhB;;AAEA,SAAO,YAAY;AAAA,QACTF,KADS,GACSH,MADT,CACTG,KADS;AAAA,QACFV,MADE,GACSO,MADT,CACFP,MADE;;;AAGlBzE,SAAKsF,qBAAL,CAA2BL,IAA3B;;AAECG,YAAQG,SAAR,GAAoB,oBAApB;AACAH,YAAQI,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuBL,KAAvB,EAA8BV,MAA9B;;AAGA;AACAW,YAAQK,SAAR,GAAoB,CAApB;AACAL,YAAQM,WAAR,GAAsB,OAAtB;AACAN,YAAQO,SAAR;AACA,QAAMC,IAAIT,SAASnF,KAAK8E,OAAL,GAAa,CAAtB,CAAV;;AAEA,QAAIe,YAAYvB,8BAA8BW,IAA9B,EAAoCE,KAApC,EAA2CV,MAA3C,CAAhB;AACD,QAAIoB,aAAW,CAAf,EAAkBA,YAAU,CAAV;;AAElB,SAAK,IAAI9D,IAAE8D,SAAN,EAAiBC,IAAE,CAAxB,EAA2BA,IAAGX,QAAMU,SAApC,EAAgD9D,KAAK+D,GAArD,EAA0D;AACzDV,cAAQW,MAAR,CAAeD,CAAf,EAAiBrB,SAASmB,IAAGX,KAAKlD,CAAL,CAA7B;AACC;;AAEFqD,YAAQY,MAAR;AACA,GAvBD;AAwBD;;AAED,SAASC,UAAT,CAAqBjG,IAArB,EAA2BgF,MAA3B,EAAmC;AACjC,MAAIkB,oBAAJ;;AAEA,MAAMC,aAAapB,iBAAiB/E,IAAjB,EAAuBgF,MAAvB,CAAnB;;AAEA,WAASoB,IAAT,GAAiB;AACfD;AACAD,kBAAcG,sBAAsBD,IAAtB,CAAd;AACD;;AAEDA;AACD;;AAEDnD,OAAOC,OAAP,GAAiB;AACf0B,wBADe;AAEfG,oCAFe;AAGfkB;AAHe,CAAjB","file":"src.9c181246.map","sourceRoot":"../src","sourcesContent":["function connectAll (...args) {\n  for (var i = 0; i < args.length - 1; i += 1) {\n    args[i].connect(args[i + 1])\n  }\n\n  return args[0]\n}\n\nconnectAll.obj = function (obj) {\n  connectAll(...Object.values(obj))\n  return obj\n}\n\nmodule.exports = connectAll\n","// https://github.com/benji6/virtual-audio-graph/blob/master/src/data.ts\nconst audioParamProperties = [\n  'attack',\n  'delayTime',\n  'detune',\n  'frequency',\n  'gain',\n  'knee',\n  'pan',\n  'playbackRate',\n  'ratio',\n  'reduction',\n  'release',\n  'threshold',\n  'Q',\n]\n\nmodule.exports = function setParams (node, params) {\n  Object.keys(params).forEach(key => {\n    const value = params[key]\n    if (audioParamProperties.indexOf(key) >= 0) {\n      node[key].value = value\n    } else {\n      node[key] = value\n    }\n  })\n  \n  return node\n}\n\nmodule.exports.delta = function delta (node, params) {\n  Object.keys(params).forEach(key => {\n    const value = params[key]\n    if (audioParamProperties.indexOf(key) >= 0) {\n      node[key].value += value\n    } else {\n      node[key] += value\n    }\n  })\n  \n  return node\n}\n","const setParams = require('./setParams')\n\nfunction createNode (ac, info) {\n  if (!info.type) { debugger }\n  const func = `create${info.type}`\n  return ac[func]()\n}\n\nmodule.exports = function (ac, info) {\n  let prev\n  const nodes = {}\n\n  Object.keys(info).forEach(key => {\n    const item = info[key]\n    \n    if (item instanceof AudioParam || item instanceof AudioNode) {\n      prev.connect(item)\n      return\n    }\n\n    const node = item.node || createNode(ac, item)\n\n    if (node instanceof AudioNode) {\n      nodes[key] = node\n    }\n\n    if (item.params) {\n      setParams(node, item.params)\n    }\n\n    // connect previous node to this one\n    if (prev) {\n      prev.connect(node)\n    }\n\n    prev = node\n  })\n\n  return nodes\n}\n","function percentRange (min, max, percent) {\n  const range = max - min\n  return min + (percent * range)\n}\n\nfunction wrap (number, lower, upper) {\n  if (number < lower) { return upper - 1 }\n  if (number >= upper) { return lower }\n  return number\n}\n\nmodule.exports = {\n  percentRange,\n  wrap\n}\n","module.exports = function paramTimeline (param, steps) {\n  let time\n\n  steps.forEach(step => {\n    if (step.time || !time) {\n      time = step.time || 0\n    }\n\n    if (step.value) {\n      param.setValueAtTime(step.value, time)\n      return\n    }\n\n    if (step.linearTo) {\n      param.linearRampToValueAtTime(step.linearTo, time + step.duration)\n      time += step.duration\n      return\n    }\n\n    if (step.expTo) {\n      param.exponentialRampToValueAtTime(step.expTo, time + step.duration)\n      time += step.duration\n      return\n    }\n  })\n  \n  return time\n}\n","function inRange (min, max) {\n  return Math.floor(Math.random() * (max - min)) + min\n}\n\nfunction floatInRange (min, max) {\n  return min + (Math.random() * (max - min))\n}\n\nfunction from (values) {\n  return values[inRange(0, values.length)]\n}\n\nmodule.exports = {\n  inRange,\n  floatInRange,\n  from\n}\n","module.exports.connectAll = require('./connectAll')\nmodule.exports.createNodes = require('./createNodes')\nmodule.exports.num = require('./num')\nmodule.exports.paramTimeline = require('./paramTimeline')\nmodule.exports.rand = require('./rand')\nmodule.exports.setParams = require('./setParams')\n","const {\n  connectAll,\n  createNodes,\n  setParams,\n  paramTimeline,\n  num,\n  rand\n} = require('wakit')\n\nlet seq = 0\n\nexport class Filter {\n  constructor (props, children) {\n    this._id = ++seq\n    this.node = ac.createBiquadFilter()\n\n    this.children = children\n    this.children.forEach(ch => ch.connect(this.node))\n\n    this.update(props)\n  }\n\n  get frequency () {\n    return this.node.frequency\n  }\n\n  set frequency (value) {\n    this.node.frequency.value = value\n  }\n\n  get gain () {\n    return this.node.gain\n  }\n\n  set gain (value) {\n    this.node.gain.value = value\n  }\n\n  get Q () {\n    return this.node.Q\n  }\n\n  set Q (value) {\n    this.node.Q.value = value\n  }\n\n  update (props) {\n    const params = [\n      'frequency',\n      'gain',\n      'Q'\n    ]\n\n    params.forEach(key => {\n      if (props[key] === undefined) { return }\n\n      this.updateParam(key, props[key])\n    })\n\n    if (props.type) {\n      this.node.type = props.type\n    }\n  }\n\n  updateParam (key, value) {\n    (Array.isArray(value) ? value : [value]).forEach(v => {\n      if (typeof v === 'number') {\n        this[key] = v\n      } else if (v.connect) {\n        v.connect(this[key])\n        this.children.push(v)\n      }\n    })\n  }\n\n  connect (dest) {\n    this.node.connect(dest)\n  }\n\n  disconnect () {\n    this.node.disconnect()\n    delete this.node\n  }\n\n  start (time) {\n    this.children.forEach(ch => ch.start(time))\n  }\n\n  stop (time) {\n    this.children.forEach(ch => ch.stop(time))\n  }\n}\n\nexport class Osc {\n  constructor (props) {\n    this._id = ++seq\n    this.nodes = createNodes(ac, {\n      osc: {\n        type: 'Oscillator'\n      },\n      amp: {\n        type: 'Gain'\n      }\n    })\n\n    this.children = []\n    this.update(props)\n  }\n\n  get detune () {\n    return this.nodes.osc.detune\n  }\n\n  set detune (value) {\n    this.nodes.osc.detune.value = value\n  }\n\n  get frequency () {\n    return this.nodes.osc.frequency\n  }\n\n  set frequency (value) {\n    this.nodes.osc.frequency.value = value\n  }\n\n  get gain () {\n    return this.nodes.amp.gain\n  }\n\n  set gain (value) {\n    this.nodes.amp.gain.value = value\n  }\n\n  update (props) {\n    const params = [\n      'detune',\n      'frequency',\n      'gain'\n    ]\n\n    params.forEach(key => {\n      if (props[key] === undefined) { return }\n\n      this.updateParam(key, props[key])\n    })\n\n    if (props.type) {\n      this.nodes.osc.type = props.type\n    }\n  }\n\n  updateParam (key, value) {\n    (Array.isArray(value) ? value : [value]).forEach(v => {\n      if (typeof v === 'number') {\n        this[key] = v\n      } else if (v.connect) {\n        v.connect(this[key])\n\n        if (!(v instanceof ConstantSourceNode)) {\n          this.children.push(v)\n        }\n      }\n    })\n  }\n\n  connect (dest) {\n    this.nodes.amp.connect(dest)\n  }\n\n  disconnect () {\n    if (this.disconnected) {\n      return\n    }\n\n    this.children.forEach((ch, i) => {\n      ch.disconnect()\n      delete this.children[i]\n    })\n\n    this.nodes.amp.disconnect()\n    this.nodes.osc.disconnect()\n\n    delete this.nodes.amp\n    delete this.nodes.osc\n\n    this.disconnected = true\n  }\n\n  start (time) {\n    this.children.forEach(ch => ch.start(time))\n    this.nodes.osc.start(time)\n\n    return time\n  }\n\n  stop (time) {\n    this.children.forEach(ch => {\n      ch.stop(time)\n    })\n\n    const threshold = 0.002\n    const id = setInterval(() => {\n      if (this.disconnected) {\n        clearInterval(id)\n        return\n      }\n\n      if (this.gain.value < threshold) {\n        this.nodes.osc.stop()\n        this.disconnect()\n        clearInterval(id)\n      }\n    }, 500)\n  }\n}\n\nexport class Env {\n  constructor (props) {\n    this._id = ++seq\n    this.props = props\n    this.param = null\n  }\n\n  connect (param) {\n    this.param = param\n  }\n\n  disconnect () {\n    delete this.param\n  }\n\n  start (time = ac.currentTime) {\n    const { props, param } = this\n    if (!param) { return time }\n\n    const { value } = param\n    const finalTime = paramTimeline(param, [\n      {\n        time,\n        value: props.from || 0.0001\n      },\n\n      {\n        linearTo: props.to || value,\n        duration: props.attack || 0.1\n      }\n    ])\n\n    return finalTime\n  }\n  \n  stop (time = ac.currentTime) {\n    const { props, param } = this\n    if (!param) { return time }\n\n    if (props.release === undefined) { return Infinity }\n\n    const { value } = param\n\n    param.cancelScheduledValues(time)\n    const finalTime = paramTimeline(param, [\n      {\n        time,\n        value: props.to || value\n      },\n\n      {\n        linearTo: props.from || 0.0001,\n        duration: props.release || 0.1\n      }\n    ])\n\n    return finalTime\n  }\n}\n","'use strict';\n\nmodule.exports = function frequencyToMidiNoteNumber(frequency) {\n  return Math.round(69 + 12 * Math.log2(frequency / 440));\n};\n","import { Env, Osc, Filter } from './audio-components'\n\nconst {\n  connectAll,\n  createNodes,\n  setParams,\n  paramTimeline,\n  num,\n  rand\n} = require('wakit')\n\nconst noteToFreq = (note) => 440 * Math.pow(2, (note - 69) / 12)\nconst freqToNote = require('frequency-to-midi-note-number')\n\nif (!window.ac) { window.ac = new AudioContext() }\nconst { ac } = window\n\nconst oscTypes = [\n  'sine',\n  'triangle',\n  'sawtooth'\n]\n\nconst defs = []\n\ndefs[0] = ({ detune, time, duration }, detuneSource) => {\n  const frequency = 110\n  const freqFactor = .5\n  const gainFactor = .25\n  const gainK = -2.0\n\n  const note = new Filter({\n    type: 'lowpass',\n    frequency: [\n      20000,\n      new Env({\n        attack: duration * .5\n      })\n    ],\n    gain: 1,\n    Q: 1\n  }, [\n    new Osc({\n      type: rand.from(oscTypes),\n\n      detune: [\n        new Env({\n          attack: duration * .5,\n          from: detune,\n          to: detune - 10\n        }),\n        detuneSource\n      ],\n\n      gain: new Env({\n        attack: duration * .9,\n        release: duration * .5,\n        to: 0.3\n      }),\n\n      frequency: [\n        frequency,\n\n        new Osc({\n          type: rand.from(oscTypes),\n          frequency: frequency * freqFactor,\n          detune: [\n            new Env({\n              attack: duration * .5,\n              from: detune,\n              to: detune - 10\n            }),\n            detuneSource\n          ],\n          \n          gain: [\n            (frequency * gainFactor) * Math.pow(2, (freqToNote(frequency) - 60) / 12 * gainK),\n            new Env({\n              attack: duration * .5,\n              release: duration * 2\n            }),\n            new Osc({\n              frequency: [\n                rand.floatInRange(.1, 5),\n                new Env({\n                  attack: duration * .5,\n                })\n              ],\n              gain: [\n                100,\n                new Env({\n                  attack: 3.0,\n                })\n              ]\n            })\n          ]\n        })\n      ]\n    })\n  ])\n\n  return note\n}\n\ndefs[1] = ({ detune, time, duration }, detuneSource) => {\n  const frequency = 110\n  const freqFactor = 3\n  const gainFactor = 3\n  const gainK = -2.0\n\n  const note = new Filter({\n    type: 'highpass',\n    frequency: new Env({\n      attack: duration * .5,\n      from: 10000,\n      to: 0\n    }),\n    Q: 1\n  }, [\n    new Osc({\n      type: rand.from(oscTypes),\n\n      gain: new Env({\n        attack: duration * .9,\n        release: duration * .5,\n        to: 0.1\n      }),\n\n      detune: detuneSource,\n\n      frequency: [\n        frequency,\n\n        new Osc({\n          type: rand.from(oscTypes),\n\n          frequency: frequency * freqFactor,\n\n          detune: detuneSource,\n          \n          gain: [\n            (frequency * gainFactor) * Math.pow(2, (freqToNote(frequency) - 60) / 12 * gainK),\n            new Env({\n              attack: duration * .5,\n              release: duration * 2\n            }),\n            new Osc({\n              frequency: [\n                rand.floatInRange(.1, 5),\n                new Env({\n                  attack: duration * .5,\n                })\n              ],\n              gain: [\n                100,\n                new Env({\n                  attack: 3.0,\n                })\n              ]\n            })\n          ]\n        })\n      ]\n    })\n  ])\n\n  return note\n}\n\ndefs[2] = ({ detune, time, duration }, detuneSource) => {\n  const frequency = rand.from([ 110, 220 ])\n  const freqFactor = rand.from([ .25, .5, 1, 2, 4 ])\n  const gainFactor = rand.floatInRange(.25, 2)\n  const gainK = rand.floatInRange(-2, 2)\n\n  const note = new Filter({\n    type: rand.from(['notch', 'lowpass']),\n    frequency: new Env({\n      attack: duration,\n      from: 20000,\n      to: 0\n    }),\n    gain: 50,\n    Q: 1\n  }, [\n    new Osc({\n      type: rand.from(oscTypes),\n\n      detune: [\n        detune,\n        detuneSource\n      ],\n\n      gain: new Env({\n        attack: duration * .9,\n        release: duration * .5,\n        to: 0.1\n      }),\n\n      frequency: [\n        frequency,\n\n        new Osc({\n          type: rand.from(oscTypes),\n          frequency: frequency * freqFactor,\n          detune: [\n            detune,\n            detuneSource\n          ],\n\n          gain: [\n            (frequency * gainFactor) * Math.pow(2, (freqToNote(frequency) - 60) / 12 * gainK),\n            new Env({\n              attack: duration * .5,\n              release: duration * 2\n            }),\n            new Osc({\n              frequency: [\n                rand.floatInRange(.1, 5),\n                new Env({\n                  attack: duration * .5,\n                })\n              ],\n              gain: [\n                rand.inRange(1, 100),\n                new Env({\n                  attack: duration * .3,\n                })\n              ]\n            })\n          ]\n        })\n      ]\n    })\n  ])\n\n  return note\n}\n\ndefs[3] = ({ detune, time, duration }, detuneSource) => {\n  const frequency = rand.from([ 220, 440, 880 ])\n  const freqFactor = rand.from([ .25, .5, 1, 2, 4 ])\n  const gainFactor = rand.floatInRange(.25, 2)\n  const gainK = rand.floatInRange(-2, 2)\n\n  const note = new Filter({\n    type: rand.from(['notch', 'highpass', 'lowpass']),\n    frequency: [\n      15000,\n      new Osc({\n        frequency: [\n          rand.floatInRange(.1, 5),\n          new Env({\n            attack: duration * .5,\n          })\n        ],\n        gain: [\n          10000,\n          new Env({\n            attack: duration * .3,\n          })\n        ]\n      })\n    ],\n    Q: 1\n  }, [\n    new Osc({\n      type: rand.from(oscTypes),\n\n      detune: [\n        detune,\n        detuneSource\n      ],\n\n      gain: new Env({\n        attack: rand.floatInRange(0.01, duration * .5),\n        release: duration * 1.5,\n        to: .1\n      }),\n\n      frequency,\n    })\n  ])\n\n  return note\n}\n\nexport default defs\n","/*\r\n    Copyright (c) 2012 DinahMoe AB & Oskar Eriksson\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation\r\n    files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy,\r\n    modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software\r\n    is furnished to do so, subject to the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\r\n    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n/*global module*/\r\n(function() {\r\n\r\n    var userContext,\r\n        userInstance,\r\n        pipe = function(param, val) {\r\n            param.value = val;\r\n        },\r\n        Super = Object.create(null, {\r\n            activate: {\r\n                writable: true,\r\n                value: function(doActivate) {\r\n                    if (doActivate) {\r\n                        this.input.disconnect();\r\n                        this.input.connect(this.activateNode);\r\n                        if (this.activateCallback) {\r\n                            this.activateCallback(doActivate);\r\n                        }\r\n                    } else {\r\n                        this.input.disconnect();\r\n                        this.input.connect(this.output);\r\n                    }\r\n                }\r\n            },\r\n            bypass: {\r\n                get: function() {\r\n                    return this._bypass;\r\n                },\r\n                set: function(value) {\r\n                    if (this._lastBypassValue === value) {\r\n                        return;\r\n                    }\r\n                    this._bypass = value;\r\n                    this.activate(!value);\r\n                    this._lastBypassValue = value;\r\n                }\r\n            },\r\n            connect: {\r\n                value: function(target) {\r\n                    this.output.connect(target);\r\n                }\r\n            },\r\n            disconnect: {\r\n                value: function(target) {\r\n                    this.output.disconnect(target);\r\n                }\r\n            },\r\n            connectInOrder: {\r\n                value: function(nodeArray) {\r\n                    var i = nodeArray.length - 1;\r\n                    while (i--) {\r\n                        if (!nodeArray[i].connect) {\r\n                            return console.error(\"AudioNode.connectInOrder: TypeError: Not an AudioNode.\", nodeArray[i]);\r\n                        }\r\n                        if (nodeArray[i + 1].input) {\r\n                            nodeArray[i].connect(nodeArray[i + 1].input);\r\n                        } else {\r\n                            nodeArray[i].connect(nodeArray[i + 1]);\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            getDefaults: {\r\n                value: function() {\r\n                    var result = {};\r\n                    for (var key in this.defaults) {\r\n                        result[key] = this.defaults[key].value;\r\n                    }\r\n                    return result;\r\n                }\r\n            },\r\n            automate: {\r\n                value: function(property, value, duration, startTime) {\r\n                    var start = startTime ? ~~(startTime / 1000) : userContext.currentTime,\r\n                        dur = duration ? ~~(duration / 1000) : 0,\r\n                        _is = this.defaults[property],\r\n                        param = this[property],\r\n                        method;\r\n\r\n                    if (param) {\r\n                        if (_is.automatable) {\r\n                            if (!duration) {\r\n                                method = \"setValueAtTime\";\r\n                            } else {\r\n                                method = \"linearRampToValueAtTime\";\r\n                                param.cancelScheduledValues(start);\r\n                                param.setValueAtTime(param.value, start);\r\n                            }\r\n                            param[method](value, dur + start);\r\n                        } else {\r\n                            param = value;\r\n                        }\r\n                    } else {\r\n                        console.error(\"Invalid Property for \" + this.name);\r\n                    }\r\n                }\r\n            }\r\n        }),\r\n        FLOAT = \"float\",\r\n        BOOLEAN = \"boolean\",\r\n        STRING = \"string\",\r\n        INT = \"int\";\r\n\r\n    if (typeof module !== \"undefined\" && module.exports) {\r\n        module.exports = Tuna;\r\n    } else if (typeof define === \"function\") {\r\n        window.define(\"Tuna\", definition);\r\n    } else {\r\n        window.Tuna = Tuna;\r\n    }\r\n\r\n    function definition() {\r\n        return Tuna;\r\n    }\r\n\r\n    function Tuna(context) {\r\n        if (!(this instanceof Tuna)) {\r\n            return new Tuna(context);\r\n        }\r\n\r\n        var _window = typeof window === \"undefined\" ? {} : window;\r\n\r\n        if (!_window.AudioContext) {\r\n            _window.AudioContext = _window.webkitAudioContext;\r\n        }\r\n        if (!context) {\r\n            console.log(\"tuna.js: Missing audio context! Creating a new context for you.\");\r\n            context = _window.AudioContext && (new _window.AudioContext());\r\n        }\r\n        if (!context) {\r\n            throw new Error(\"Tuna cannot initialize because this environment does not support web audio.\");\r\n        }\r\n        connectify(context);\r\n        userContext = context;\r\n        userInstance = this;\r\n    }\r\n\r\n    function connectify(context) {\r\n        if (context.__connectified__ === true) return;\r\n\r\n        var gain = context.createGain(),\r\n            proto = Object.getPrototypeOf(Object.getPrototypeOf(gain)),\r\n            oconnect = proto.connect;\r\n\r\n        proto.connect = shimConnect;\r\n        context.__connectified__ = true; // Prevent overriding connect more than once\r\n\r\n        function shimConnect() {\r\n            var node = arguments[0];\r\n            arguments[0] = Super.isPrototypeOf ? (Super.isPrototypeOf(node) ? node.input : node) : (node.input || node);\r\n            oconnect.apply(this, arguments);\r\n            return node;\r\n        }\r\n    }\r\n\r\n    function dbToWAVolume(db) {\r\n        return Math.max(0, Math.round(100 * Math.pow(2, db / 6)) / 100);\r\n    }\r\n\r\n    function fmod(x, y) {\r\n        // http://kevin.vanzonneveld.net\r\n        // *     example 1: fmod(5.7, 1.3);\r\n        // *     returns 1: 0.5\r\n        var tmp, tmp2, p = 0,\r\n            pY = 0,\r\n            l = 0.0,\r\n            l2 = 0.0;\r\n\r\n        tmp = x.toExponential().match(/^.\\.?(.*)e(.+)$/);\r\n        p = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\r\n        tmp = y.toExponential().match(/^.\\.?(.*)e(.+)$/);\r\n        pY = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\r\n\r\n        if (pY > p) {\r\n            p = pY;\r\n        }\r\n\r\n        tmp2 = (x % y);\r\n\r\n        if (p < -100 || p > 20) {\r\n            // toFixed will give an out of bound error so we fix it like this:\r\n            l = Math.round(Math.log(tmp2) / Math.log(10));\r\n            l2 = Math.pow(10, l);\r\n\r\n            return (tmp2 / l2).toFixed(l - p) * l2;\r\n        } else {\r\n            return parseFloat(tmp2.toFixed(-p));\r\n        }\r\n    }\r\n\r\n    function sign(x) {\r\n        if (x === 0) {\r\n            return 1;\r\n        } else {\r\n            return Math.abs(x) / x;\r\n        }\r\n    }\r\n\r\n    function tanh(n) {\r\n        return (Math.exp(n) - Math.exp(-n)) / (Math.exp(n) + Math.exp(-n));\r\n    }\r\n\r\n    function initValue(userVal, defaultVal) {\r\n        return userVal === undefined ? defaultVal : userVal;\r\n    }\r\n\r\n    Tuna.prototype.Bitcrusher = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.bufferSize = properties.bufferSize || this.defaults.bufferSize.value;\r\n\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.processor = userContext.createScriptProcessor(this.bufferSize, 1, 1);\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.processor);\r\n        this.processor.connect(this.output);\r\n\r\n        var phaser = 0,\r\n            last = 0,\r\n            input, output, step, i, length;\r\n        this.processor.onaudioprocess = function(e) {\r\n            input = e.inputBuffer.getChannelData(0),\r\n            output = e.outputBuffer.getChannelData(0),\r\n            step = Math.pow(1 / 2, this.bits);\r\n            length = input.length;\r\n            for (i = 0; i < length; i++) {\r\n                phaser += this.normfreq;\r\n                if (phaser >= 1.0) {\r\n                    phaser -= 1.0;\r\n                    last = step * Math.floor(input[i] / step + 0.5);\r\n                }\r\n                output[i] = last;\r\n            }\r\n        };\r\n\r\n        this.bits = properties.bits || this.defaults.bits.value;\r\n        this.normfreq = initValue(properties.normfreq, this.defaults.normfreq.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Bitcrusher.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Bitcrusher\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                bits: {\r\n                    value: 4,\r\n                    min: 1,\r\n                    max: 16,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                bufferSize: {\r\n                    value: 4096,\r\n                    min: 256,\r\n                    max: 16384,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                normfreq: {\r\n                    value: 0.1,\r\n                    min: 0.0001,\r\n                    max: 1.0,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                }\r\n            }\r\n        },\r\n        bits: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.processor.bits;\r\n            },\r\n            set: function(value) {\r\n                this.processor.bits = value;\r\n            }\r\n        },\r\n        normfreq: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.processor.normfreq;\r\n            },\r\n            set: function(value) {\r\n                this.processor.normfreq = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Cabinet = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.convolver = this.newConvolver(properties.impulsePath || \"../impulses/impulse_guitar.wav\");\r\n        this.makeupNode = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.convolver.input);\r\n        this.convolver.output.connect(this.makeupNode);\r\n        this.makeupNode.connect(this.output);\r\n\r\n        this.makeupGain = initValue(properties.makeupGain, this.defaults.makeupGain.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Cabinet.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Cabinet\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                makeupGain: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 20,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        makeupGain: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.makeupNode.gain;\r\n            },\r\n            set: function(value) {\r\n                this.makeupNode.gain.value = value;\r\n            }\r\n        },\r\n        newConvolver: {\r\n            value: function(impulsePath) {\r\n                return new userInstance.Convolver({\r\n                    impulse: impulsePath,\r\n                    dryLevel: 0,\r\n                    wetLevel: 1\r\n                });\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Chorus = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.attenuator = this.activateNode = userContext.createGain();\r\n        this.splitter = userContext.createChannelSplitter(2);\r\n        this.delayL = userContext.createDelay();\r\n        this.delayR = userContext.createDelay();\r\n        this.feedbackGainNodeLR = userContext.createGain();\r\n        this.feedbackGainNodeRL = userContext.createGain();\r\n        this.merger = userContext.createChannelMerger(2);\r\n        this.output = userContext.createGain();\r\n\r\n        this.lfoL = new userInstance.LFO({\r\n            target: this.delayL.delayTime,\r\n            callback: pipe\r\n        });\r\n        this.lfoR = new userInstance.LFO({\r\n            target: this.delayR.delayTime,\r\n            callback: pipe\r\n        });\r\n\r\n        this.input.connect(this.attenuator);\r\n        this.attenuator.connect(this.output);\r\n        this.attenuator.connect(this.splitter);\r\n        this.splitter.connect(this.delayL, 0);\r\n        this.splitter.connect(this.delayR, 1);\r\n        this.delayL.connect(this.feedbackGainNodeLR);\r\n        this.delayR.connect(this.feedbackGainNodeRL);\r\n        this.feedbackGainNodeLR.connect(this.delayR);\r\n        this.feedbackGainNodeRL.connect(this.delayL);\r\n        this.delayL.connect(this.merger, 0, 0);\r\n        this.delayR.connect(this.merger, 0, 1);\r\n        this.merger.connect(this.output);\r\n\r\n        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\r\n        this.rate = initValue(properties.rate, this.defaults.rate.value);\r\n        this.delay = initValue(properties.delay, this.defaults.delay.value);\r\n        this.depth = initValue(properties.depth, this.defaults.depth.value);\r\n        this.lfoR.phase = Math.PI / 2;\r\n        this.attenuator.gain.value = 0.6934; // 1 / (10 ^ (((20 * log10(3)) / 3) / 20))\r\n        this.lfoL.activate(true);\r\n        this.lfoR.activate(true);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Chorus.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Chorus\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                feedback: {\r\n                    value: 0.4,\r\n                    min: 0,\r\n                    max: 0.95,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                delay: {\r\n                    value: 0.0045,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                depth: {\r\n                    value: 0.7,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                rate: {\r\n                    value: 1.5,\r\n                    min: 0,\r\n                    max: 8,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        delay: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._delay;\r\n            },\r\n            set: function(value) {\r\n                this._delay = 0.0002 * (Math.pow(10, value) * 2);\r\n                this.lfoL.offset = this._delay;\r\n                this.lfoR.offset = this._delay;\r\n                this._depth = this._depth;\r\n            }\r\n        },\r\n        depth: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._depth;\r\n            },\r\n            set: function(value) {\r\n                this._depth = value;\r\n                this.lfoL.oscillation = this._depth * this._delay;\r\n                this.lfoR.oscillation = this._depth * this._delay;\r\n            }\r\n        },\r\n        feedback: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._feedback;\r\n            },\r\n            set: function(value) {\r\n                this._feedback = value;\r\n                this.feedbackGainNodeLR.gain.value = this._feedback;\r\n                this.feedbackGainNodeRL.gain.value = this._feedback;\r\n            }\r\n        },\r\n        rate: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._rate;\r\n            },\r\n            set: function(value) {\r\n                this._rate = value;\r\n                this.lfoL.frequency = this._rate;\r\n                this.lfoR.frequency = this._rate;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Compressor = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.compNode = this.activateNode = userContext.createDynamicsCompressor();\r\n        this.makeupNode = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.compNode.connect(this.makeupNode);\r\n        this.makeupNode.connect(this.output);\r\n\r\n        this.automakeup = initValue(properties.automakeup, this.defaults.automakeup.value);\r\n        this.makeupGain = initValue(properties.makeupGain, this.defaults.makeupGain.value);\r\n        this.threshold = initValue(properties.threshold, this.defaults.threshold.value);\r\n        this.release = initValue(properties.release, this.defaults.release.value);\r\n        this.attack = initValue(properties.attack, this.defaults.attack.value);\r\n        this.ratio = properties.ratio || this.defaults.ratio.value;\r\n        this.knee = initValue(properties.knee, this.defaults.knee.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Compressor.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Compressor\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                threshold: {\r\n                    value: -20,\r\n                    min: -60,\r\n                    max: 0,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                release: {\r\n                    value: 250,\r\n                    min: 10,\r\n                    max: 2000,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                makeupGain: {\r\n                    value: 1,\r\n                    min: 1,\r\n                    max: 100,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                attack: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1000,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                ratio: {\r\n                    value: 4,\r\n                    min: 1,\r\n                    max: 50,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                knee: {\r\n                    value: 5,\r\n                    min: 0,\r\n                    max: 40,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                automakeup: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        computeMakeup: {\r\n            value: function() {\r\n                var magicCoefficient = 4, // raise me if the output is too hot\r\n                    c = this.compNode;\r\n                return -(c.threshold.value - c.threshold.value / c.ratio.value) / magicCoefficient;\r\n            }\r\n        },\r\n        automakeup: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._automakeup;\r\n            },\r\n            set: function(value) {\r\n                this._automakeup = value;\r\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\r\n            }\r\n        },\r\n        threshold: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.threshold;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.threshold.value = value;\r\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\r\n            }\r\n        },\r\n        ratio: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.ratio;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.ratio.value = value;\r\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\r\n            }\r\n        },\r\n        knee: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.knee;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.knee.value = value;\r\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\r\n            }\r\n        },\r\n        attack: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.attack;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.attack.value = value / 1000;\r\n            }\r\n        },\r\n        release: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.compNode.release;\r\n            },\r\n            set: function(value) {\r\n                this.compNode.release.value = value / 1000;\r\n            }\r\n        },\r\n        makeupGain: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.makeupNode.gain;\r\n            },\r\n            set: function(value) {\r\n                this.makeupNode.gain.value = dbToWAVolume(value);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Convolver = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.convolver = userContext.createConvolver();\r\n        this.dry = userContext.createGain();\r\n        this.filterLow = userContext.createBiquadFilter();\r\n        this.filterHigh = userContext.createBiquadFilter();\r\n        this.wet = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.filterLow);\r\n        this.activateNode.connect(this.dry);\r\n        this.filterLow.connect(this.filterHigh);\r\n        this.filterHigh.connect(this.convolver);\r\n        this.convolver.connect(this.wet);\r\n        this.wet.connect(this.output);\r\n        this.dry.connect(this.output);\r\n\r\n        this.dryLevel = initValue(properties.dryLevel, this.defaults.dryLevel.value);\r\n        this.wetLevel = initValue(properties.wetLevel, this.defaults.wetLevel.value);\r\n        this.highCut = properties.highCut || this.defaults.highCut.value;\r\n        this.buffer = properties.impulse || \"../impulses/ir_rev_short.wav\";\r\n        this.lowCut = properties.lowCut || this.defaults.lowCut.value;\r\n        this.level = initValue(properties.level, this.defaults.level.value);\r\n        this.filterHigh.type = \"lowpass\";\r\n        this.filterLow.type = \"highpass\";\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Convolver.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Convolver\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                highCut: {\r\n                    value: 22050,\r\n                    min: 20,\r\n                    max: 22050,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                lowCut: {\r\n                    value: 20,\r\n                    min: 20,\r\n                    max: 22050,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                dryLevel: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                wetLevel: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                level: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        lowCut: {\r\n            get: function() {\r\n                return this.filterLow.frequency;\r\n            },\r\n            set: function(value) {\r\n                this.filterLow.frequency.value = value;\r\n            }\r\n        },\r\n        highCut: {\r\n            get: function() {\r\n                return this.filterHigh.frequency;\r\n            },\r\n            set: function(value) {\r\n                this.filterHigh.frequency.value = value;\r\n            }\r\n        },\r\n        level: {\r\n            get: function() {\r\n                return this.output.gain;\r\n            },\r\n            set: function(value) {\r\n                this.output.gain.value = value;\r\n            }\r\n        },\r\n        dryLevel: {\r\n            get: function() {\r\n                return this.dry.gain;\r\n            },\r\n            set: function(value) {\r\n                this.dry.gain.value = value;\r\n            }\r\n        },\r\n        wetLevel: {\r\n            get: function() {\r\n                return this.wet.gain;\r\n            },\r\n            set: function(value) {\r\n                this.wet.gain.value = value;\r\n            }\r\n        },\r\n        buffer: {\r\n            enumerable: false,\r\n            get: function() {\r\n                return this.convolver.buffer;\r\n            },\r\n            set: function(impulse) {\r\n                var convolver = this.convolver,\r\n                    xhr = new XMLHttpRequest();\r\n                if (!impulse) {\r\n                    console.log(\"Tuna.Convolver.setBuffer: Missing impulse path!\");\r\n                    return;\r\n                }\r\n                xhr.open(\"GET\", impulse, true);\r\n                xhr.responseType = \"arraybuffer\";\r\n                xhr.onreadystatechange = function() {\r\n                    if (xhr.readyState === 4) {\r\n                        if (xhr.status < 300 && xhr.status > 199 || xhr.status === 302) {\r\n                            userContext.decodeAudioData(xhr.response, function(buffer) {\r\n                                convolver.buffer = buffer;\r\n                            }, function(e) {\r\n                                if (e) console.log(\"Tuna.Convolver.setBuffer: Error decoding data\" + e);\r\n                            });\r\n                        }\r\n                    }\r\n                };\r\n                xhr.send(null);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Delay = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.dry = userContext.createGain();\r\n        this.wet = userContext.createGain();\r\n        this.filter = userContext.createBiquadFilter();\r\n        this.delay = userContext.createDelay(10);\r\n        this.feedbackNode = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.delay);\r\n        this.activateNode.connect(this.dry);\r\n        this.delay.connect(this.filter);\r\n        this.filter.connect(this.feedbackNode);\r\n        this.feedbackNode.connect(this.delay);\r\n        this.feedbackNode.connect(this.wet);\r\n        this.wet.connect(this.output);\r\n        this.dry.connect(this.output);\r\n\r\n        this.delayTime = properties.delayTime || this.defaults.delayTime.value;\r\n        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\r\n        this.wetLevel = initValue(properties.wetLevel, this.defaults.wetLevel.value);\r\n        this.dryLevel = initValue(properties.dryLevel, this.defaults.dryLevel.value);\r\n        this.cutoff = properties.cutoff || this.defaults.cutoff.value;\r\n        this.filter.type = \"lowpass\";\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Delay.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Delay\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                delayTime: {\r\n                    value: 100,\r\n                    min: 20,\r\n                    max: 1000,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                feedback: {\r\n                    value: 0.45,\r\n                    min: 0,\r\n                    max: 0.9,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                cutoff: {\r\n                    value: 20000,\r\n                    min: 20,\r\n                    max: 20000,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                wetLevel: {\r\n                    value: 0.5,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                dryLevel: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        delayTime: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.delay.delayTime;\r\n            },\r\n            set: function(value) {\r\n                this.delay.delayTime.value = value / 1000;\r\n            }\r\n        },\r\n        wetLevel: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.wet.gain;\r\n            },\r\n            set: function(value) {\r\n                this.wet.gain.value = value;\r\n            }\r\n        },\r\n        dryLevel: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.dry.gain;\r\n            },\r\n            set: function(value) {\r\n                this.dry.gain.value = value;\r\n            }\r\n        },\r\n        feedback: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.feedbackNode.gain;\r\n            },\r\n            set: function(value) {\r\n                this.feedbackNode.gain.value = value;\r\n            }\r\n        },\r\n        cutoff: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.frequency;\r\n            },\r\n            set: function(value) {\r\n                this.filter.frequency.value = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Filter = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.filter = userContext.createBiquadFilter();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.filter);\r\n        this.filter.connect(this.output);\r\n\r\n        this.frequency = properties.frequency || this.defaults.frequency.value;\r\n        this.Q = properties.resonance || this.defaults.Q.value;\r\n        this.filterType = initValue(properties.filterType, this.defaults.filterType.value);\r\n        this.gain = initValue(properties.gain, this.defaults.gain.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Filter.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Filter\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                frequency: {\r\n                    value: 800,\r\n                    min: 20,\r\n                    max: 22050,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                Q: {\r\n                    value: 1,\r\n                    min: 0.001,\r\n                    max: 100,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                gain: {\r\n                    value: 0,\r\n                    min: -40,\r\n                    max: 40,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                filterType: {\r\n                    value: \"lowpass\",\r\n                    automatable: false,\r\n                    type: STRING\r\n                }\r\n            }\r\n        },\r\n        filterType: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.type;\r\n            },\r\n            set: function(value) {\r\n                this.filter.type = value;\r\n            }\r\n        },\r\n        Q: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.Q;\r\n            },\r\n            set: function(value) {\r\n                this.filter.Q.value = value;\r\n            }\r\n        },\r\n        gain: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.gain;\r\n            },\r\n            set: function(value) {\r\n                this.filter.gain.value = value;\r\n            }\r\n        },\r\n        frequency: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.filter.frequency;\r\n            },\r\n            set: function(value) {\r\n                this.filter.frequency.value = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Gain = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.gainNode = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.gainNode);\r\n        this.gainNode.connect(this.output);\r\n\r\n        this.gain = initValue(properties.gain, this.defaults.gain.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Gain.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Gain\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                gain: {\r\n                    value: 1.0,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                }\r\n            }\r\n        },\r\n        gain: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.gainNode.gain;\r\n            },\r\n            set: function(value) {\r\n                this.gainNode.gain.value = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.MoogFilter = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.bufferSize = properties.bufferSize || this.defaults.bufferSize.value;\r\n\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.processor = userContext.createScriptProcessor(this.bufferSize, 1, 1);\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.processor);\r\n        this.processor.connect(this.output);\r\n\r\n        var in1, in2, in3, in4, out1, out2, out3, out4;\r\n        in1 = in2 = in3 = in4 = out1 = out2 = out3 = out4 = 0.0;\r\n        var input, output, f, fb, i, length, inputFactor;\r\n        this.processor.onaudioprocess = function(e) {\r\n            input = e.inputBuffer.getChannelData(0),\r\n                output = e.outputBuffer.getChannelData(0),\r\n                f = this.cutoff * 1.16,\r\n                inputFactor = 0.35013 * (f * f) * (f * f);\r\n            fb = this.resonance * (1.0 - 0.15 * f * f);\r\n            length = input.length;\r\n            for (i = 0; i < length; i++) {\r\n                input[i] -= out4 * fb;\r\n                input[i] *= inputFactor;\r\n                out1 = input[i] + 0.3 * in1 + (1 - f) * out1; // Pole 1\r\n                in1 = input[i];\r\n                out2 = out1 + 0.3 * in2 + (1 - f) * out2; // Pole 2\r\n                in2 = out1;\r\n                out3 = out2 + 0.3 * in3 + (1 - f) * out3; // Pole 3\r\n                in3 = out2;\r\n                out4 = out3 + 0.3 * in4 + (1 - f) * out4; // Pole 4\r\n                in4 = out3;\r\n                output[i] = out4;\r\n            }\r\n        };\r\n\r\n        this.cutoff = initValue(properties.cutoff, this.defaults.cutoff.value);\r\n        this.resonance = initValue(properties.resonance, this.defaults.resonance.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.MoogFilter.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"MoogFilter\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                bufferSize: {\r\n                    value: 4096,\r\n                    min: 256,\r\n                    max: 16384,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                cutoff: {\r\n                    value: 0.065,\r\n                    min: 0.0001,\r\n                    max: 1.0,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                resonance: {\r\n                    value: 3.5,\r\n                    min: 0.0,\r\n                    max: 4.0,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                }\r\n            }\r\n        },\r\n        cutoff: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.processor.cutoff;\r\n            },\r\n            set: function(value) {\r\n                this.processor.cutoff = value;\r\n            }\r\n        },\r\n        resonance: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.processor.resonance;\r\n            },\r\n            set: function(value) {\r\n                this.processor.resonance = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Overdrive = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.inputDrive = userContext.createGain();\r\n        this.waveshaper = userContext.createWaveShaper();\r\n        this.outputDrive = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.inputDrive);\r\n        this.inputDrive.connect(this.waveshaper);\r\n        this.waveshaper.connect(this.outputDrive);\r\n        this.outputDrive.connect(this.output);\r\n\r\n        this.ws_table = new Float32Array(this.k_nSamples);\r\n        this.drive = initValue(properties.drive, this.defaults.drive.value);\r\n        this.outputGain = initValue(properties.outputGain, this.defaults.outputGain.value);\r\n        this.curveAmount = initValue(properties.curveAmount, this.defaults.curveAmount.value);\r\n        this.algorithmIndex = initValue(properties.algorithmIndex, this.defaults.algorithmIndex.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Overdrive.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Overdrive\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                drive: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT,\r\n                    scaled: true\r\n                },\r\n                outputGain: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: true,\r\n                    type: FLOAT,\r\n                    scaled: true\r\n                },\r\n                curveAmount: {\r\n                    value: 0.725,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                algorithmIndex: {\r\n                    value: 0,\r\n                    min: 0,\r\n                    max: 5,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        k_nSamples: {\r\n            value: 8192\r\n        },\r\n        drive: {\r\n            get: function() {\r\n                return this.inputDrive.gain;\r\n            },\r\n            set: function(value) {\r\n                this._drive = value;\r\n            }\r\n        },\r\n        curveAmount: {\r\n            get: function() {\r\n                return this._curveAmount;\r\n            },\r\n            set: function(value) {\r\n                this._curveAmount = value;\r\n                if (this._algorithmIndex === undefined) {\r\n                    this._algorithmIndex = 0;\r\n                }\r\n                this.waveshaperAlgorithms[this._algorithmIndex](this._curveAmount, this.k_nSamples, this.ws_table);\r\n                this.waveshaper.curve = this.ws_table;\r\n            }\r\n        },\r\n        outputGain: {\r\n            get: function() {\r\n                return this.outputDrive.gain;\r\n            },\r\n            set: function(value) {\r\n                this._outputGain = dbToWAVolume(value);\r\n            }\r\n        },\r\n        algorithmIndex: {\r\n            get: function() {\r\n                return this._algorithmIndex;\r\n            },\r\n            set: function(value) {\r\n                this._algorithmIndex = value;\r\n                this.curveAmount = this._curveAmount;\r\n            }\r\n        },\r\n        waveshaperAlgorithms: {\r\n            value: [\r\n                function(amount, n_samples, ws_table) {\r\n                    amount = Math.min(amount, 0.9999);\r\n                    var k = 2 * amount / (1 - amount),\r\n                        i, x;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        ws_table[i] = (1 + k) * x / (1 + k * Math.abs(x));\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) {\r\n                    var i, x, y;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        y = ((0.5 * Math.pow((x + 1.4), 2)) - 1) * y >= 0 ? 5.8 : 1.2;\r\n                        ws_table[i] = tanh(y);\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) {\r\n                    var i, x, y, a = 1 - amount;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        y = x < 0 ? -Math.pow(Math.abs(x), a + 0.04) : Math.pow(x, a);\r\n                        ws_table[i] = tanh(y * 2);\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) {\r\n                    var i, x, y, abx, a = 1 - amount > 0.99 ? 0.99 : 1 - amount;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        abx = Math.abs(x);\r\n                        if (abx < a) y = abx;\r\n                        else if (abx > a) y = a + (abx - a) / (1 + Math.pow((abx - a) / (1 - a), 2));\r\n                        else if (abx > 1) y = abx;\r\n                        ws_table[i] = sign(x) * y * (1 / ((a + 1) / 2));\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) { // fixed curve, amount doesn't do anything, the distortion is just from the drive\r\n                    var i, x;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        if (x < -0.08905) {\r\n                            ws_table[i] = (-3 / 4) * (1 - (Math.pow((1 - (Math.abs(x) - 0.032857)), 12)) + (1 / 3) * (Math.abs(x) - 0.032847)) + 0.01;\r\n                        } else if (x >= -0.08905 && x < 0.320018) {\r\n                            ws_table[i] = (-6.153 * (x * x)) + 3.9375 * x;\r\n                        } else {\r\n                            ws_table[i] = 0.630035;\r\n                        }\r\n                    }\r\n                },\r\n                function(amount, n_samples, ws_table) {\r\n                    var a = 2 + Math.round(amount * 14),\r\n                        // we go from 2 to 16 bits, keep in mind for the UI\r\n                        bits = Math.round(Math.pow(2, a - 1)),\r\n                        // real number of quantization steps divided by 2\r\n                        i, x;\r\n                    for (i = 0; i < n_samples; i++) {\r\n                        x = i * 2 / n_samples - 1;\r\n                        ws_table[i] = Math.round(x * bits) / bits;\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Panner = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.panner = userContext.createStereoPanner();\r\n        this.output = userContext.createGain();\r\n\r\n        this.activateNode.connect(this.panner);\r\n        this.panner.connect(this.output);\r\n\r\n        this.pan = initValue(properties.pan, this.defaults.pan.value);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Panner.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Panner\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                pan: {\r\n                    value: 0.0,\r\n                    min: -1.0,\r\n                    max: 1.0,\r\n                    automatable: true,\r\n                    type: FLOAT\r\n                }\r\n            }\r\n        },\r\n        pan: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this.panner.pan;\r\n            },\r\n            set: function(value) {\r\n                this.panner.pan.value = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Phaser = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.splitter = this.activateNode = userContext.createChannelSplitter(2);\r\n        this.filtersL = [];\r\n        this.filtersR = [];\r\n        this.feedbackGainNodeL = userContext.createGain();\r\n        this.feedbackGainNodeR = userContext.createGain();\r\n        this.merger = userContext.createChannelMerger(2);\r\n        this.filteredSignal = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n        this.lfoL = new userInstance.LFO({\r\n            target: this.filtersL,\r\n            callback: this.callback\r\n        });\r\n        this.lfoR = new userInstance.LFO({\r\n            target: this.filtersR,\r\n            callback: this.callback\r\n        });\r\n\r\n        var i = this.stage;\r\n        while (i--) {\r\n            this.filtersL[i] = userContext.createBiquadFilter();\r\n            this.filtersR[i] = userContext.createBiquadFilter();\r\n            this.filtersL[i].type = \"allpass\";\r\n            this.filtersR[i].type = \"allpass\";\r\n        }\r\n        this.input.connect(this.splitter);\r\n        this.input.connect(this.output);\r\n        this.splitter.connect(this.filtersL[0], 0, 0);\r\n        this.splitter.connect(this.filtersR[0], 1, 0);\r\n        this.connectInOrder(this.filtersL);\r\n        this.connectInOrder(this.filtersR);\r\n        this.filtersL[this.stage - 1].connect(this.feedbackGainNodeL);\r\n        this.filtersL[this.stage - 1].connect(this.merger, 0, 0);\r\n        this.filtersR[this.stage - 1].connect(this.feedbackGainNodeR);\r\n        this.filtersR[this.stage - 1].connect(this.merger, 0, 1);\r\n        this.feedbackGainNodeL.connect(this.filtersL[0]);\r\n        this.feedbackGainNodeR.connect(this.filtersR[0]);\r\n        this.merger.connect(this.output);\r\n\r\n        this.rate = initValue(properties.rate, this.defaults.rate.value);\r\n        this.baseModulationFrequency = properties.baseModulationFrequency || this.defaults.baseModulationFrequency.value;\r\n        this.depth = initValue(properties.depth, this.defaults.depth.value);\r\n        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\r\n        this.stereoPhase = initValue(properties.stereoPhase, this.defaults.stereoPhase.value);\r\n\r\n        this.lfoL.activate(true);\r\n        this.lfoR.activate(true);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Phaser.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Phaser\"\r\n        },\r\n        stage: {\r\n            value: 4\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                rate: {\r\n                    value: 0.1,\r\n                    min: 0,\r\n                    max: 8,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                depth: {\r\n                    value: 0.6,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                feedback: {\r\n                    value: 0.7,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                stereoPhase: {\r\n                    value: 40,\r\n                    min: 0,\r\n                    max: 180,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                baseModulationFrequency: {\r\n                    value: 700,\r\n                    min: 500,\r\n                    max: 1500,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        callback: {\r\n            value: function(filters, value) {\r\n                for (var stage = 0; stage < 4; stage++) {\r\n                    filters[stage].frequency.value = value;\r\n                }\r\n            }\r\n        },\r\n        depth: {\r\n            get: function() {\r\n                return this._depth;\r\n            },\r\n            set: function(value) {\r\n                this._depth = value;\r\n                this.lfoL.oscillation = this._baseModulationFrequency * this._depth;\r\n                this.lfoR.oscillation = this._baseModulationFrequency * this._depth;\r\n            }\r\n        },\r\n        rate: {\r\n            get: function() {\r\n                return this._rate;\r\n            },\r\n            set: function(value) {\r\n                this._rate = value;\r\n                this.lfoL.frequency = this._rate;\r\n                this.lfoR.frequency = this._rate;\r\n            }\r\n        },\r\n        baseModulationFrequency: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._baseModulationFrequency;\r\n            },\r\n            set: function(value) {\r\n                this._baseModulationFrequency = value;\r\n                this.lfoL.offset = this._baseModulationFrequency;\r\n                this.lfoR.offset = this._baseModulationFrequency;\r\n                this._depth = this._depth;\r\n            }\r\n        },\r\n        feedback: {\r\n            get: function() {\r\n                return this._feedback;\r\n            },\r\n            set: function(value) {\r\n                this._feedback = value;\r\n                this.feedbackGainNodeL.gain.value = this._feedback;\r\n                this.feedbackGainNodeR.gain.value = this._feedback;\r\n            }\r\n        },\r\n        stereoPhase: {\r\n            get: function() {\r\n                return this._stereoPhase;\r\n            },\r\n            set: function(value) {\r\n                this._stereoPhase = value;\r\n                var newPhase = this.lfoL._phase + this._stereoPhase * Math.PI / 180;\r\n                newPhase = fmod(newPhase, 2 * Math.PI);\r\n                this.lfoR._phase = newPhase;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.PingPongDelay = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.wet = userContext.createGain();\r\n        this.stereoToMonoMix = userContext.createGain();\r\n        this.feedbackLevel = userContext.createGain();\r\n        this.output = userContext.createGain();\r\n        this.delayLeft = userContext.createDelay(10);\r\n        this.delayRight = userContext.createDelay(10);\r\n\r\n        this.activateNode = userContext.createGain();\r\n        this.splitter = userContext.createChannelSplitter(2);\r\n        this.merger = userContext.createChannelMerger(2);\r\n\r\n        this.activateNode.connect(this.splitter);\r\n        this.splitter.connect(this.stereoToMonoMix, 0, 0);\r\n        this.splitter.connect(this.stereoToMonoMix, 1, 0);\r\n        this.stereoToMonoMix.gain.value = .5;\r\n        this.stereoToMonoMix.connect(this.wet);\r\n        this.wet.connect(this.delayLeft);\r\n        this.feedbackLevel.connect(this.wet);\r\n        this.delayLeft.connect(this.delayRight);\r\n        this.delayRight.connect(this.feedbackLevel);\r\n        this.delayLeft.connect(this.merger, 0, 0);\r\n        this.delayRight.connect(this.merger, 0, 1);\r\n        this.merger.connect(this.output);\r\n        this.activateNode.connect(this.output);\r\n\r\n        this.delayTimeLeft = properties.delayTimeLeft !== undefined ? properties.delayTimeLeft : this.defaults.delayTimeLeft.value;\r\n        this.delayTimeRight = properties.delayTimeRight !== undefined ? properties.delayTimeRight : this.defaults.delayTimeRight.value;\r\n        this.feedbackLevel.gain.value = properties.feedback !== undefined ? properties.feedback : this.defaults.feedback.value;\r\n        this.wet.gain.value = properties.wetLevel !== undefined ? properties.wetLevel : this.defaults.wetLevel.value;\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.PingPongDelay.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"PingPongDelay\"\r\n        },\r\n        delayTimeLeft: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._delayTimeLeft;\r\n            },\r\n            set: function(value) {\r\n                this._delayTimeLeft = value;\r\n                this.delayLeft.delayTime.value = value / 1000;\r\n            }\r\n        },\r\n        delayTimeRight: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._delayTimeRight;\r\n            },\r\n            set: function(value) {\r\n                this._delayTimeRight = value;\r\n                this.delayRight.delayTime.value = value / 1000;\r\n            }\r\n        },\r\n        wetLevel: {\r\n            enumerable: true,\r\n            get: function () {\r\n                return this.wet.gain;\r\n            },\r\n            set: function (value) {\r\n                this.wet.gain.value = value;\r\n            }\r\n        }, \r\n        feedback: {\r\n            enumerable: true,\r\n            get: function () {\r\n                return this.feedbackLevel.gain;\r\n            },\r\n            set: function (value) {\r\n                this.feedbackLevel.gain.value = value;\r\n            }\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                delayTimeLeft: {\r\n                    value: 200,\r\n                    min: 1,\r\n                    max: 10000,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                delayTimeRight: {\r\n                    value: 400,\r\n                    min: 1,\r\n                    max: 10000,\r\n                    automatable: false,\r\n                    type: INT\r\n                },\r\n                feedback: {\r\n                    value: 0.3,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                wetLevel: {\r\n                    value: 0.5,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.Tremolo = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.splitter = this.activateNode = userContext.createChannelSplitter(\r\n                2),\r\n            this.amplitudeL = userContext.createGain(),\r\n            this.amplitudeR = userContext.createGain(),\r\n            this.merger = userContext.createChannelMerger(2),\r\n            this.output = userContext.createGain();\r\n        this.lfoL = new userInstance.LFO({\r\n            target: this.amplitudeL.gain,\r\n            callback: pipe\r\n        });\r\n        this.lfoR = new userInstance.LFO({\r\n            target: this.amplitudeR.gain,\r\n            callback: pipe\r\n        });\r\n\r\n        this.input.connect(this.splitter);\r\n        this.splitter.connect(this.amplitudeL, 0);\r\n        this.splitter.connect(this.amplitudeR, 1);\r\n        this.amplitudeL.connect(this.merger, 0, 0);\r\n        this.amplitudeR.connect(this.merger, 0, 1);\r\n        this.merger.connect(this.output);\r\n\r\n        this.rate = properties.rate || this.defaults.rate.value;\r\n        this.intensity = initValue(properties.intensity, this.defaults.intensity.value);\r\n        this.stereoPhase = initValue(properties.stereoPhase, this.defaults.stereoPhase.value);\r\n\r\n        this.lfoL.offset = 1 - (this.intensity / 2);\r\n        this.lfoR.offset = 1 - (this.intensity / 2);\r\n        this.lfoL.phase = this.stereoPhase * Math.PI / 180;\r\n\r\n        this.lfoL.activate(true);\r\n        this.lfoR.activate(true);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.Tremolo.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"Tremolo\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                intensity: {\r\n                    value: 0.3,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                stereoPhase: {\r\n                    value: 0,\r\n                    min: 0,\r\n                    max: 180,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                rate: {\r\n                    value: 5,\r\n                    min: 0.1,\r\n                    max: 11,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        intensity: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._intensity;\r\n            },\r\n            set: function(value) {\r\n                this._intensity = value;\r\n                this.lfoL.offset = 1 - this._intensity / 2;\r\n                this.lfoR.offset = 1 - this._intensity / 2;\r\n                this.lfoL.oscillation = this._intensity;\r\n                this.lfoR.oscillation = this._intensity;\r\n            }\r\n        },\r\n        rate: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._rate;\r\n            },\r\n            set: function(value) {\r\n                this._rate = value;\r\n                this.lfoL.frequency = this._rate;\r\n                this.lfoR.frequency = this._rate;\r\n            }\r\n        },\r\n        stereoPhase: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._stereoPhase;\r\n            },\r\n            set: function(value) {\r\n                this._stereoPhase = value;\r\n                var newPhase = this.lfoL._phase + this._stereoPhase * Math.PI / 180;\r\n                newPhase = fmod(newPhase, 2 * Math.PI);\r\n                this.lfoR.phase = newPhase;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.WahWah = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.activateNode = userContext.createGain();\r\n        this.envelopeFollower = new userInstance.EnvelopeFollower({\r\n            target: this,\r\n            callback: function(context, value) {\r\n                context.sweep = value;\r\n            }\r\n        });\r\n        this.filterBp = userContext.createBiquadFilter();\r\n        this.filterPeaking = userContext.createBiquadFilter();\r\n        this.output = userContext.createGain();\r\n\r\n        //Connect AudioNodes\r\n        this.activateNode.connect(this.filterBp);\r\n        this.filterBp.connect(this.filterPeaking);\r\n        this.filterPeaking.connect(this.output);\r\n\r\n        //Set Properties\r\n        this.init();\r\n        this.automode = initValue(properties.automode, this.defaults.automode.value);\r\n        this.resonance = properties.resonance || this.defaults.resonance.value;\r\n        this.sensitivity = initValue(properties.sensitivity, this.defaults.sensitivity.value);\r\n        this.baseFrequency = initValue(properties.baseFrequency, this.defaults.baseFrequency.value);\r\n        this.excursionOctaves = properties.excursionOctaves || this.defaults.excursionOctaves.value;\r\n        this.sweep = initValue(properties.sweep, this.defaults.sweep.value);\r\n\r\n        this.activateNode.gain.value = 2;\r\n        this.envelopeFollower.activate(true);\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.WahWah.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"WahWah\"\r\n        },\r\n        defaults: {\r\n            writable: true,\r\n            value: {\r\n                automode: {\r\n                    value: true,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                },\r\n                baseFrequency: {\r\n                    value: 0.5,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                excursionOctaves: {\r\n                    value: 2,\r\n                    min: 1,\r\n                    max: 6,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                sweep: {\r\n                    value: 0.2,\r\n                    min: 0,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                resonance: {\r\n                    value: 10,\r\n                    min: 1,\r\n                    max: 100,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                sensitivity: {\r\n                    value: 0.5,\r\n                    min: -1,\r\n                    max: 1,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        automode: {\r\n            get: function() {\r\n                return this._automode;\r\n            },\r\n            set: function(value) {\r\n                this._automode = value;\r\n                if (value) {\r\n                    this.activateNode.connect(this.envelopeFollower.input);\r\n                    this.envelopeFollower.activate(true);\r\n                } else {\r\n                    this.envelopeFollower.activate(false);\r\n                    this.activateNode.disconnect();\r\n                    this.activateNode.connect(this.filterBp);\r\n                }\r\n            }\r\n        },\r\n        filterFreqTimeout: {\r\n            value: 0\r\n        },\r\n        setFilterFreq: {\r\n            value: function() {\r\n                try {\r\n                    this.filterBp.frequency.value = Math.min(22050, this._baseFrequency + this._excursionFrequency * this._sweep);\r\n                    this.filterPeaking.frequency.value = Math.min(22050, this._baseFrequency + this._excursionFrequency * this._sweep);\r\n                } catch (e) {\r\n                    clearTimeout(this.filterFreqTimeout);\r\n                    //put on the next cycle to let all init properties be set\r\n                    this.filterFreqTimeout = setTimeout(function() {\r\n                        this.setFilterFreq();\r\n                    }.bind(this), 0);\r\n                }\r\n            }\r\n        },\r\n        sweep: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._sweep;\r\n            },\r\n            set: function(value) {\r\n                this._sweep = Math.pow(value > 1 ? 1 : value < 0 ? 0 : value, this._sensitivity);\r\n                this.setFilterFreq();\r\n            }\r\n        },\r\n        baseFrequency: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._baseFrequency;\r\n            },\r\n            set: function(value) {\r\n                this._baseFrequency = 50 * Math.pow(10, value * 2);\r\n                this._excursionFrequency = Math.min(userContext.sampleRate / 2, this.baseFrequency * Math.pow(2, this._excursionOctaves));\r\n                this.setFilterFreq();\r\n            }\r\n        },\r\n        excursionOctaves: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._excursionOctaves;\r\n            },\r\n            set: function(value) {\r\n                this._excursionOctaves = value;\r\n                this._excursionFrequency = Math.min(userContext.sampleRate / 2, this.baseFrequency * Math.pow(2, this._excursionOctaves));\r\n                this.setFilterFreq();\r\n            }\r\n        },\r\n        sensitivity: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._sensitivity;\r\n            },\r\n            set: function(value) {\r\n                this._sensitivity = Math.pow(10, value);\r\n            }\r\n        },\r\n        resonance: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._resonance;\r\n            },\r\n            set: function(value) {\r\n                this._resonance = value;\r\n                this.filterPeaking.Q = this._resonance;\r\n            }\r\n        },\r\n        init: {\r\n            value: function() {\r\n                this.output.gain.value = 1;\r\n                this.filterPeaking.type = \"peaking\";\r\n                this.filterBp.type = \"bandpass\";\r\n                this.filterPeaking.frequency.value = 100;\r\n                this.filterPeaking.gain.value = 20;\r\n                this.filterPeaking.Q.value = 5;\r\n                this.filterBp.frequency.value = 100;\r\n                this.filterBp.Q.value = 1;\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.EnvelopeFollower = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n        this.input = userContext.createGain();\r\n        this.jsNode = this.output = userContext.createScriptProcessor(this.buffersize, 1, 1);\r\n\r\n        this.input.connect(this.output);\r\n\r\n        this.attackTime = initValue(properties.attackTime, this.defaults.attackTime.value);\r\n        this.releaseTime = initValue(properties.releaseTime, this.defaults.releaseTime.value);\r\n        this._envelope = 0;\r\n        this.target = properties.target || {};\r\n        this.callback = properties.callback || function() {};\r\n\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.EnvelopeFollower.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"EnvelopeFollower\"\r\n        },\r\n        defaults: {\r\n            value: {\r\n                attackTime: {\r\n                    value: 0.003,\r\n                    min: 0,\r\n                    max: 0.5,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                releaseTime: {\r\n                    value: 0.5,\r\n                    min: 0,\r\n                    max: 0.5,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        buffersize: {\r\n            value: 256\r\n        },\r\n        envelope: {\r\n            value: 0\r\n        },\r\n        sampleRate: {\r\n            value: 44100\r\n        },\r\n        attackTime: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._attackTime;\r\n            },\r\n            set: function(value) {\r\n                this._attackTime = value;\r\n                this._attackC = Math.exp(-1 / this._attackTime * this.sampleRate / this.buffersize);\r\n            }\r\n        },\r\n        releaseTime: {\r\n            enumerable: true,\r\n            get: function() {\r\n                return this._releaseTime;\r\n            },\r\n            set: function(value) {\r\n                this._releaseTime = value;\r\n                this._releaseC = Math.exp(-1 / this._releaseTime * this.sampleRate / this.buffersize);\r\n            }\r\n        },\r\n        callback: {\r\n            get: function() {\r\n                return this._callback;\r\n            },\r\n            set: function(value) {\r\n                if (typeof value === \"function\") {\r\n                    this._callback = value;\r\n                } else {\r\n                    console.error(\"tuna.js: \" + this.name + \": Callback must be a function!\");\r\n                }\r\n            }\r\n        },\r\n        target: {\r\n            get: function() {\r\n                return this._target;\r\n            },\r\n            set: function(value) {\r\n                this._target = value;\r\n            }\r\n        },\r\n        activate: {\r\n            value: function(doActivate) {\r\n                this.activated = doActivate;\r\n                if (doActivate) {\r\n                    this.jsNode.connect(userContext.destination);\r\n                    this.jsNode.onaudioprocess = this.returnCompute(this);\r\n                } else {\r\n                    this.jsNode.disconnect();\r\n                    this.jsNode.onaudioprocess = null;\r\n                }\r\n                if (this.activateCallback) {\r\n                    this.activateCallback(doActivate);\r\n                }\r\n            }\r\n        },\r\n        returnCompute: {\r\n            value: function(instance) {\r\n                return function(event) {\r\n                    instance.compute(event);\r\n                };\r\n            }\r\n        },\r\n        compute: {\r\n            value: function(event) {\r\n                var count = event.inputBuffer.getChannelData(0).length,\r\n                    channels = event.inputBuffer.numberOfChannels,\r\n                    current, chan, rms, i;\r\n                chan = rms = i = 0;\r\n                if (channels > 1) { //need to mixdown\r\n                    for (i = 0; i < count; ++i) {\r\n                        for (; chan < channels; ++chan) {\r\n                            current = event.inputBuffer.getChannelData(chan)[i];\r\n                            rms += (current * current) / channels;\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (i = 0; i < count; ++i) {\r\n                        current = event.inputBuffer.getChannelData(0)[i];\r\n                        rms += (current * current);\r\n                    }\r\n                }\r\n                rms = Math.sqrt(rms);\r\n\r\n                if (this._envelope < rms) {\r\n                    this._envelope *= this._attackC;\r\n                    this._envelope += (1 - this._attackC) * rms;\r\n                } else {\r\n                    this._envelope *= this._releaseC;\r\n                    this._envelope += (1 - this._releaseC) * rms;\r\n                }\r\n                this._callback(this._target, this._envelope);\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.prototype.LFO = function(properties) {\r\n        if (!properties) {\r\n            properties = this.getDefaults();\r\n        }\r\n\r\n        //Instantiate AudioNode\r\n        this.input = userContext.createGain();\r\n        this.output = userContext.createScriptProcessor(256, 1, 1);\r\n        this.activateNode = userContext.destination;\r\n\r\n        //Set Properties\r\n        this.frequency = initValue(properties.frequency, this.defaults.frequency.value);\r\n        this.offset = initValue(properties.offset, this.defaults.offset.value);\r\n        this.oscillation = initValue(properties.oscillation, this.defaults.oscillation.value);\r\n        this.phase = initValue(properties.phase, this.defaults.phase.value);\r\n        this.target = properties.target || {};\r\n        this.output.onaudioprocess = this.callback(properties.callback || function() {});\r\n        this.bypass = properties.bypass || this.defaults.bypass.value;\r\n    };\r\n    Tuna.prototype.LFO.prototype = Object.create(Super, {\r\n        name: {\r\n            value: \"LFO\"\r\n        },\r\n        bufferSize: {\r\n            value: 256\r\n        },\r\n        sampleRate: {\r\n            value: 44100\r\n        },\r\n        defaults: {\r\n            value: {\r\n                frequency: {\r\n                    value: 1,\r\n                    min: 0,\r\n                    max: 20,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                offset: {\r\n                    value: 0.85,\r\n                    min: 0,\r\n                    max: 22049,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                oscillation: {\r\n                    value: 0.3,\r\n                    min: -22050,\r\n                    max: 22050,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                phase: {\r\n                    value: 0,\r\n                    min: 0,\r\n                    max: 2 * Math.PI,\r\n                    automatable: false,\r\n                    type: FLOAT\r\n                },\r\n                bypass: {\r\n                    value: false,\r\n                    automatable: false,\r\n                    type: BOOLEAN\r\n                }\r\n            }\r\n        },\r\n        frequency: {\r\n            get: function() {\r\n                return this._frequency;\r\n            },\r\n            set: function(value) {\r\n                this._frequency = value;\r\n                this._phaseInc = 2 * Math.PI * this._frequency * this.bufferSize / this.sampleRate;\r\n            }\r\n        },\r\n        offset: {\r\n            get: function() {\r\n                return this._offset;\r\n            },\r\n            set: function(value) {\r\n                this._offset = value;\r\n            }\r\n        },\r\n        oscillation: {\r\n            get: function() {\r\n                return this._oscillation;\r\n            },\r\n            set: function(value) {\r\n                this._oscillation = value;\r\n            }\r\n        },\r\n        phase: {\r\n            get: function() {\r\n                return this._phase;\r\n            },\r\n            set: function(value) {\r\n                this._phase = value;\r\n            }\r\n        },\r\n        target: {\r\n            get: function() {\r\n                return this._target;\r\n            },\r\n            set: function(value) {\r\n                this._target = value;\r\n            }\r\n        },\r\n        activate: {\r\n            value: function(doActivate) {\r\n                if (doActivate) {\r\n                    this.output.connect(userContext.destination);\r\n                    if (this.activateCallback) {\r\n                        this.activateCallback(doActivate);\r\n                    }\r\n                } else {\r\n                    this.output.disconnect();\r\n                }\r\n            }\r\n        },\r\n        callback: {\r\n            value: function(callback) {\r\n                var that = this;\r\n                return function() {\r\n                    that._phase += that._phaseInc;\r\n                    if (that._phase > 2 * Math.PI) {\r\n                        that._phase = 0;\r\n                    }\r\n                    callback(that._target, that._offset + that._oscillation * Math.sin(that._phase));\r\n                };\r\n            }\r\n        }\r\n    });\r\n\r\n    Tuna.toString = Tuna.prototype.toString = function() {\r\n        return \"Please visit https://github.com/Theodeus/tuna/wiki for instructions on how to use Tuna.js\";\r\n    };\r\n})();\r\n","// source: https://webaudiotech.com/sites/limiter_comparison/oscilloscope.js\n\nconst MINVAL = 1234;\t// height/2 == zero.\tMINVAL is the \"minimum detected signal\" level.\n\nfunction findFirstPositiveZeroCrossing(buf, buflen, height) {\n\tvar i = 0;\n\tvar last_zero = -1;\n\tvar t;\n\n\t// advance until we're zero or negative\n\twhile (i<buflen && (buf[i] > height/2 ) )\n\t\ti++;\n\n\tif (i>=buflen)\n\t\treturn 0;\n\n\t// advance until we're above MINVAL, keeping track of last zero.\n\twhile (i<buflen && ((t=buf[i]) < MINVAL )) {\n\t\tif (t >= height/2) {\n\t\t\tif (last_zero == -1)\n\t\t\t\tlast_zero = i;\n\t\t} else\n\t\t\tlast_zero = -1;\n\t\ti++;\n\t}\n\n\t// we may have jumped over MINVAL in one sample.\n\tif (last_zero == -1)\n\t\tlast_zero = i;\n\n\tif (i==buflen)\t// We didn't find any positive zero crossings\n\t\treturn 0;\n\n\t// The first sample might be a zero.\tIf so, return it.\n\tif (last_zero == 0)\n\t\treturn 0;\n\n\treturn last_zero;\n}\n\nfunction createNode (ac) {\n  const node = ac.createAnalyser()\n  node.fftSize = 1024\n  return node\n}\n\nfunction createRenderFunc (node, canvas) {\n  const data = new Uint8Array(canvas.width)\n  const context = canvas.getContext('2d')\n\n  return function () {\n    const { width, height } = canvas\n\n\t  node.getByteTimeDomainData(data);\n\n    context.fillStyle = 'hsl(250, 20%, 20%)'\n    context.fillRect(0, 0, width, height)\n\n\n    // draw the oscilloscope path\n    context.lineWidth = 1\n    context.strokeStyle = 'white'\n    context.beginPath()\n    const c = width / (node.fftSize/2)\n\n    var zeroCross = findFirstPositiveZeroCrossing(data, width, height);\n\t  if (zeroCross==0) zeroCross=1;\n    \n\t  for (var i=zeroCross, j=0; j<(width-zeroCross); i++, j++) {\n\t\t  context.lineTo(j,height-( c *data[i]));\n    }\n\n\t  context.stroke();\n  }\n}\n\nfunction renderLoop (node, canvas) {\n  let animFrameId\n  \n  const renderFunc = createRenderFunc(node, canvas)\n  \n  function loop () {\n    renderFunc()    \n    animFrameId = requestAnimationFrame(loop)\n  }\n  \n  loop()\n}\n\nmodule.exports = {\n  createNode,\n  createRenderFunc,\n  renderLoop\n}\n","import './main.css'\n\nimport reverbImpulse from './impulses/Basement.m4a'\nimport guitarImpulse from './impulses/impulse_guitar.wav'\nimport defs from './defs'\n\nconst {\n  connectAll,\n  createNodes,\n  setParams,\n  paramTimeline,\n  num,\n  rand\n} = require('wakit')\n\nconst Tuna = require('tunajs')\n\nif (!window.ac) { window.ac = new AudioContext() }\nconst { ac } = window\n\nconst tuna = new Tuna(ac)\nconst master = setParams(ac.createGain(), {\n  gain: 1.0\n})\n\nconst convolver = new tuna.Convolver({\n  highCut: 22050,\n  lowCut: 20,\n  dryLevel: .2,\n  wetLevel: .8,\n  level: .5,\n  impulse: reverbImpulse,\n  bypass: 0\n});\n\nconst delay = new tuna.PingPongDelay({\n  wetLevel: .7,\n  feedback: .5,\n  delayTimeLeft: 150,\n  delayTimeRight: 200\n})\n\nconst cabinet = new tuna.Cabinet({\n  impulsePath: guitarImpulse,\n  makeupGain: 10\n})\n\nconst overdrive = new tuna.Overdrive({\n  outputGain: .5,\n  drive: .3,\n  curveAmount: .7,\n  algorithmIndex: 0\n})\n\nconst chorus = new tuna.Chorus({\n  rate: 5.5,\n  feedback: 0.8,\n  delay: 0.045,\n  bypass: 0\n})\n\nconst phaser = new tuna.Phaser({\n  rate: 3.2,\n  depth: 0.3,\n  feedback: 0.4,\n  stereoPhase: 30,\n  baseModulationFrequency: 700,\n  bypass: 0\n})\n\nconst compressor = setParams(ac.createDynamicsCompressor(), {\n  threshold: 0,\n  knee: 0,\n  reduction: 20.0,\n  ratio: 10,\n  attack: 1.0,\n  release: 1.0\n})\n\nconnectAll(\n  phaser,\n  master\n)\n\nconnectAll(\n  cabinet,\n  overdrive,\n  master\n)\n\nconnectAll(\n  chorus,\n  master\n)\n\nconnectAll(\n  master,\n  convolver,\n  delay,\n  compressor,\n  ac.destination\n)\n\n// ----\n\nconst scope = require('./osc-scope')\nconst scopeNode = scope.createNode(ac)\nconst scopeCanvas = document.querySelector('.scope')\n\nscope.renderLoop(scopeNode, scopeCanvas)\n\nmaster.connect(scopeNode)\n\n// ----\n\nconst muteCheckbox = document.querySelector('.mute input[type=checkbox]')\nconst muteText = document.querySelector('.mute .text')\nmuteCheckbox.addEventListener('change', updateMute)\n\nwindow.document.addEventListener(\n  'keydown',\n  onKeyDown,\n  false\n)\n\nfunction onKeyDown (event) {\n  switch (event.key) {\n  case ' ':\n  case 'm':\n    muteCheckbox.checked = !muteCheckbox.checked\n    updateMute()\n    break\n  }\n}\n\nfunction updateMute () {\n  const isMuted = muteCheckbox.checked\n\n  muteText.innerHTML = isMuted ? 'unmute' : 'mute'\n  setParams(master, {\n    gain: isMuted ? 0 : 1\n  })\n}\n\n// ----\n\nlet lastTime\nlet detuneSource1 = ac.createConstantSource()\ndetuneSource1.start()\n\nsetInterval(() => {\n  if (ac.currentTime < lastTime) { return }\n\n  const fn = defs[2]\n  const props = {\n    time: ac.currentTime,\n    duration: rand.inRange(10, 20),\n    detune: rand.from([ 0, 1200, 2400 ])\n  }\n\n  play(fn, props, detuneSource1)\n  play(fn, {\n    time: ac.currentTime + 3,\n    duration: rand.inRange(10, 20),\n    detune: rand.from([ 700, 1200 + 700 ])\n  }, detuneSource1)\n\n  lastTime = props.time + props.duration\n}, 1000)\n\n\nlet lastTime2\nlet detuneSource2 = ac.createConstantSource()\ndetuneSource2.start()\n\nsetInterval(() => {\n  if (ac.currentTime < lastTime2) { return }\n\n  const key = rand.inRange(0, 1)\n  const fn = defs[key]\n  const props = {\n    time: ac.currentTime,\n    duration: rand.inRange(10, 20),\n    detune: rand.from([ 0, 1200 ])\n  }\n\n  const dest = rand.from([ cabinet, chorus, phaser ])\n  play(fn, props, detuneSource2, dest)\n  play(fn, {\n    ...props,\n    detune: props.detune + 1\n  }, detuneSource2, dest)\n  \n  lastTime2 = props.time + props.duration\n}, 500)\n\nlet lastTime3\nlet detuneSource3 = ac.createConstantSource()\ndetuneSource3.start()\n\nsetInterval(() => {\n  if (ac.currentTime < lastTime) { return }\n\n  const fn = defs[3]\n  const props = {\n    time: ac.currentTime,\n    duration: rand.inRange(10, 20),\n    detune: rand.from([ 0, 1200 ])\n  }\n\n  play(fn, props, detuneSource1)\n  play(fn, {\n    time: ac.currentTime + 3,\n    duration: rand.inRange(10, 20),\n    detune: rand.from([ 700, 1200 + 700 ])\n  }, detuneSource3)\n\n  lastTime = props.time + props.duration\n}, 1000)\n\n// ----\n\nconst notes = window.notes = {}\nlet noteSeq = 0\n\nfunction play (fn, props, detuneSource, dest) {\n  const note = connectAll(\n    fn(props, detuneSource),\n    dest || rand.from([ cabinet, chorus, phaser ])\n  )\n\n  const {\n    duration,\n    time\n  } = props\n\n  note.start(time)\n  note.stop(time + duration)\n\n  const id = ++noteSeq\n  notes[id] = note\n  setTimeout(() => {\n    delete notes[id]\n  }, duration * 1000)\n}\n\nsetInterval(() => {\n  const amount = rand.from([0, -200])\n  const duration = 10\n  detuneSource1.offset.linearRampToValueAtTime(amount, ac.currentTime + duration)\n}, 39000)\n\nsetInterval(() => {\n  const amount = rand.from([0, -200])\n  const duration = 10\n  detuneSource2.offset.linearRampToValueAtTime(amount, ac.currentTime + duration)\n}, 53000)\n\nsetInterval(() => {\n  const amount = rand.from([0, -200])\n  const duration = 10\n  detuneSource3.offset.linearRampToValueAtTime(amount, ac.currentTime + duration)\n}, 51000)\n","var bundleURL = null;\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  // Attempt to find the URL of the current script and use that as the base URL\n  try {\n    throw new Error;\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\n","var bundle = require('./bundle-url');\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    link.remove();\n  };\n  newLink.href = link.href.split('?')[0] + '?' + Date.now();\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      if (bundle.getBaseURL(links[i].href) === bundle.getBundleURL()) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nmodule.exports = reloadCSS;\n"]}