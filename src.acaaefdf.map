{"version":3,"sources":["0","audio-components.js","defs.js","osc-scope.js","index.js"],"names":["require","connectAll","createNodes","setParams","paramTimeline","num","rand","seq","Filter","props","children","_id","node","ac","createBiquadFilter","forEach","ch","connect","update","undefined","key","updateParam","type","value","Array","isArray","v","push","dest","disconnect","time","start","stop","frequency","gain","Q","Osc","nodes","osc","ConstantSourceNode","amp","disconnected","i","threshold","id","setInterval","detune","Env","param","currentTime","finalTime","from","to","attack","release","Infinity","cancelScheduledValues","defs","noteToFreq","note","Math","pow","freqToNote","window","AudioContext","oscTypes","detuneSource","duration","floatInRange","freqFactor","gainFactor","gainK","inRange","MINVAL","findFirstPositiveZeroCrossing","buf","buflen","height","t","last_zero","createNode","createAnalyser","fftSize","createRenderFunc","canvas","data","Uint8Array","width","context","getContext","getByteTimeDomainData","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","c","zeroCross","j","lineTo","stroke","renderLoop","animFrameId","renderFunc","loop","requestAnimationFrame","module","exports","Tuna","tuna","master","createGain","convolver","Convolver","reverbImpulse","delay","PingPongDelay","cabinet","Cabinet","guitarImpulse","overdrive","Overdrive","chorus","Chorus","phaser","Phaser","compressor","createDynamicsCompressor","destination","scope","scopeNode","scopeCanvas","document","querySelector","lastTime","detuneSource1","createConstantSource","fn","lastTime2","detuneSource2","lastTime3","detuneSource3","notes","noteSeq","play","amount","offset","linearRampToValueAtTime"],"mappings":"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","file":"src.acaaefdf.map","sourceRoot":"../src","sourcesContent":[null,"const {\n  connectAll,\n  createNodes,\n  setParams,\n  paramTimeline,\n  num,\n  rand\n} = require('wakit')\n\nlet seq = 0\n\nexport class Filter {\n  constructor (props, children) {\n    this._id = ++seq\n    this.node = ac.createBiquadFilter()\n\n    this.children = children\n    this.children.forEach(ch => ch.connect(this.node))\n\n    this.update(props)\n  }\n\n  get frequency () {\n    return this.node.frequency\n  }\n\n  set frequency (value) {\n    this.node.frequency.value = value\n  }\n\n  get gain () {\n    return this.node.gain\n  }\n\n  set gain (value) {\n    this.node.gain.value = value\n  }\n\n  get Q () {\n    return this.node.Q\n  }\n\n  set Q (value) {\n    this.node.Q.value = value\n  }\n\n  update (props) {\n    const params = [\n      'frequency',\n      'gain',\n      'Q'\n    ]\n\n    params.forEach(key => {\n      if (props[key] === undefined) { return }\n\n      this.updateParam(key, props[key])\n    })\n\n    if (props.type) {\n      this.node.type = props.type\n    }\n  }\n\n  updateParam (key, value) {\n    (Array.isArray(value) ? value : [value]).forEach(v => {\n      if (typeof v === 'number') {\n        this[key] = v\n      } else if (v.connect) {\n        v.connect(this[key])\n        this.children.push(v)\n      }\n    })\n  }\n\n  connect (dest) {\n    this.node.connect(dest)\n  }\n\n  disconnect () {\n    this.node.disconnect()\n    delete this.node\n  }\n\n  start (time) {\n    this.children.forEach(ch => ch.start(time))\n  }\n\n  stop (time) {\n    this.children.forEach(ch => ch.stop(time))\n  }\n}\n\nexport class Osc {\n  constructor (props) {\n    this._id = ++seq\n    this.nodes = createNodes(ac, {\n      osc: {\n        type: 'Oscillator'\n      },\n      amp: {\n        type: 'Gain'\n      }\n    })\n\n    this.children = []\n    this.update(props)\n  }\n\n  get detune () {\n    return this.nodes.osc.detune\n  }\n\n  set detune (value) {\n    this.nodes.osc.detune.value = value\n  }\n\n  get frequency () {\n    return this.nodes.osc.frequency\n  }\n\n  set frequency (value) {\n    this.nodes.osc.frequency.value = value\n  }\n\n  get gain () {\n    return this.nodes.amp.gain\n  }\n\n  set gain (value) {\n    this.nodes.amp.gain.value = value\n  }\n\n  update (props) {\n    const params = [\n      'detune',\n      'frequency',\n      'gain'\n    ]\n\n    params.forEach(key => {\n      if (props[key] === undefined) { return }\n\n      this.updateParam(key, props[key])\n    })\n\n    if (props.type) {\n      this.nodes.osc.type = props.type\n    }\n  }\n\n  updateParam (key, value) {\n    (Array.isArray(value) ? value : [value]).forEach(v => {\n      if (typeof v === 'number') {\n        this[key] = v\n      } else if (v.connect) {\n        v.connect(this[key])\n\n        if (!(v instanceof ConstantSourceNode)) {\n          this.children.push(v)\n        }\n      }\n    })\n  }\n\n  connect (dest) {\n    this.nodes.amp.connect(dest)\n  }\n\n  disconnect () {\n    if (this.disconnected) {\n      return\n    }\n\n    this.children.forEach((ch, i) => {\n      ch.disconnect()\n      delete this.children[i]\n    })\n\n    this.nodes.amp.disconnect()\n    this.nodes.osc.disconnect()\n\n    delete this.nodes.amp\n    delete this.nodes.osc\n\n    this.disconnected = true\n  }\n\n  start (time) {\n    this.children.forEach(ch => ch.start(time))\n    this.nodes.osc.start(time)\n\n    return time\n  }\n\n  stop (time) {\n    this.children.forEach(ch => {\n      ch.stop(time)\n    })\n\n    const threshold = 0.002\n    const id = setInterval(() => {\n      if (this.disconnected) {\n        clearInterval(id)\n        return\n      }\n\n      if (this.gain.value < threshold) {\n        this.nodes.osc.stop()\n        this.disconnect()\n        clearInterval(id)\n      }\n    }, 500)\n  }\n}\n\nexport class Env {\n  constructor (props) {\n    this._id = ++seq\n    this.props = props\n    this.param = null\n  }\n\n  connect (param) {\n    this.param = param\n  }\n\n  disconnect () {\n    delete this.param\n  }\n\n  start (time = ac.currentTime) {\n    const { props, param } = this\n    if (!param) { return time }\n\n    const { value } = param\n    const finalTime = paramTimeline(param, [\n      {\n        time,\n        value: props.from || 0.0001\n      },\n\n      {\n        linearTo: props.to || value,\n        duration: props.attack || 0.1\n      }\n    ])\n\n    return finalTime\n  }\n  \n  stop (time = ac.currentTime) {\n    const { props, param } = this\n    if (!param) { return time }\n\n    if (props.release === undefined) { return Infinity }\n\n    const { value } = param\n\n    param.cancelScheduledValues(time)\n    const finalTime = paramTimeline(param, [\n      {\n        time,\n        value: props.to || value\n      },\n\n      {\n        linearTo: props.from || 0.0001,\n        duration: props.release || 0.1\n      }\n    ])\n\n    return finalTime\n  }\n}\n","import { Env, Osc, Filter } from './audio-components'\n\nconst {\n  connectAll,\n  createNodes,\n  setParams,\n  paramTimeline,\n  num,\n  rand\n} = require('wakit')\n\nconst noteToFreq = (note) => 440 * Math.pow(2, (note - 69) / 12)\nconst freqToNote = require('frequency-to-midi-note-number')\n\nif (!window.ac) { window.ac = new AudioContext() }\nconst { ac } = window\n\nconst oscTypes = [\n  'sine',\n  'triangle',\n  'sawtooth'\n]\n\nconst defs = []\n\ndefs[0] = ({ detune, time, duration }, detuneSource) => {\n  const frequency = 110\n  const freqFactor = .5\n  const gainFactor = .25\n  const gainK = -2.0\n\n  const note = new Filter({\n    type: 'lowpass',\n    frequency: [\n      20000,\n      new Env({\n        attack: duration * .5\n      })\n    ],\n    gain: 1,\n    Q: 1\n  }, [\n    new Osc({\n      type: rand.from(oscTypes),\n\n      detune: [\n        new Env({\n          attack: duration * .5,\n          from: detune,\n          to: detune - 10\n        }),\n        detuneSource\n      ],\n\n      gain: new Env({\n        attack: duration * .9,\n        release: duration * .5,\n        to: 0.3\n      }),\n\n      frequency: [\n        frequency,\n\n        new Osc({\n          type: rand.from(oscTypes),\n          frequency: frequency * freqFactor,\n          detune: [\n            new Env({\n              attack: duration * .5,\n              from: detune,\n              to: detune - 10\n            }),\n            detuneSource\n          ],\n          \n          gain: [\n            (frequency * gainFactor) * Math.pow(2, (freqToNote(frequency) - 60) / 12 * gainK),\n            new Env({\n              attack: duration * .5,\n              release: duration * 2\n            }),\n            new Osc({\n              frequency: [\n                rand.floatInRange(.1, 5),\n                new Env({\n                  attack: duration * .5,\n                })\n              ],\n              gain: [\n                100,\n                new Env({\n                  attack: 3.0,\n                })\n              ]\n            })\n          ]\n        })\n      ]\n    })\n  ])\n\n  return note\n}\n\ndefs[1] = ({ detune, time, duration }, detuneSource) => {\n  const frequency = 110\n  const freqFactor = 3\n  const gainFactor = 3\n  const gainK = -2.0\n\n  const note = new Filter({\n    type: 'highpass',\n    frequency: new Env({\n      attack: duration * .5,\n      from: 10000,\n      to: 0\n    }),\n    Q: 1\n  }, [\n    new Osc({\n      type: rand.from(oscTypes),\n\n      gain: new Env({\n        attack: duration * .9,\n        release: duration * .5,\n        to: 0.1\n      }),\n\n      detune: detuneSource,\n\n      frequency: [\n        frequency,\n\n        new Osc({\n          type: rand.from(oscTypes),\n\n          frequency: frequency * freqFactor,\n\n          detune: detuneSource,\n          \n          gain: [\n            (frequency * gainFactor) * Math.pow(2, (freqToNote(frequency) - 60) / 12 * gainK),\n            new Env({\n              attack: duration * .5,\n              release: duration * 2\n            }),\n            new Osc({\n              frequency: [\n                rand.floatInRange(.1, 5),\n                new Env({\n                  attack: duration * .5,\n                })\n              ],\n              gain: [\n                100,\n                new Env({\n                  attack: 3.0,\n                })\n              ]\n            })\n          ]\n        })\n      ]\n    })\n  ])\n\n  return note\n}\n\ndefs[2] = ({ detune, time, duration }, detuneSource) => {\n  const frequency = rand.from([ 110, 220 ])\n  const freqFactor = rand.from([ .25, .5, 1, 2, 4 ])\n  const gainFactor = rand.floatInRange(.25, 2)\n  const gainK = rand.floatInRange(-2, 2)\n\n  const note = new Filter({\n    type: rand.from(['notch', 'lowpass']),\n    frequency: new Env({\n      attack: duration,\n      from: 20000,\n      to: 0\n    }),\n    gain: 50,\n    Q: 1\n  }, [\n    new Osc({\n      type: rand.from(oscTypes),\n\n      detune: [\n        detune,\n        detuneSource\n      ],\n\n      gain: new Env({\n        attack: duration * .9,\n        release: duration * .5,\n        to: 0.1\n      }),\n\n      frequency: [\n        frequency,\n\n        new Osc({\n          type: rand.from(oscTypes),\n          frequency: frequency * freqFactor,\n          detune: [\n            detune,\n            detuneSource\n          ],\n\n          gain: [\n            (frequency * gainFactor) * Math.pow(2, (freqToNote(frequency) - 60) / 12 * gainK),\n            new Env({\n              attack: duration * .5,\n              release: duration * 2\n            }),\n            new Osc({\n              frequency: [\n                rand.floatInRange(.1, 5),\n                new Env({\n                  attack: duration * .5,\n                })\n              ],\n              gain: [\n                rand.inRange(1, 100),\n                new Env({\n                  attack: duration * .3,\n                })\n              ]\n            })\n          ]\n        })\n      ]\n    })\n  ])\n\n  return note\n}\n\ndefs[3] = ({ detune, time, duration }, detuneSource) => {\n  const frequency = rand.from([ 220, 440, 880 ])\n  const freqFactor = rand.from([ .25, .5, 1, 2, 4 ])\n  const gainFactor = rand.floatInRange(.25, 2)\n  const gainK = rand.floatInRange(-2, 2)\n\n  const note = new Filter({\n    type: rand.from(['notch', 'highpass', 'lowpass']),\n    frequency: [\n      15000,\n      new Osc({\n        frequency: [\n          rand.floatInRange(.1, 5),\n          new Env({\n            attack: duration * .5,\n          })\n        ],\n        gain: [\n          10000,\n          new Env({\n            attack: duration * .3,\n          })\n        ]\n      })\n    ],\n    Q: 1\n  }, [\n    new Osc({\n      type: rand.from(oscTypes),\n\n      detune: [\n        detune,\n        detuneSource\n      ],\n\n      gain: new Env({\n        attack: rand.floatInRange(0.01, duration * .5),\n        release: duration * 1.5,\n        to: .1\n      }),\n\n      frequency,\n    })\n  ])\n\n  return note\n}\n\nexport default defs\n","// source: https://webaudiotech.com/sites/limiter_comparison/oscilloscope.js\n\nconst MINVAL = 1234;\t// height/2 == zero.\tMINVAL is the \"minimum detected signal\" level.\n\nfunction findFirstPositiveZeroCrossing(buf, buflen, height) {\n\tvar i = 0;\n\tvar last_zero = -1;\n\tvar t;\n\n\t// advance until we're zero or negative\n\twhile (i<buflen && (buf[i] > height/2 ) )\n\t\ti++;\n\n\tif (i>=buflen)\n\t\treturn 0;\n\n\t// advance until we're above MINVAL, keeping track of last zero.\n\twhile (i<buflen && ((t=buf[i]) < MINVAL )) {\n\t\tif (t >= height/2) {\n\t\t\tif (last_zero == -1)\n\t\t\t\tlast_zero = i;\n\t\t} else\n\t\t\tlast_zero = -1;\n\t\ti++;\n\t}\n\n\t// we may have jumped over MINVAL in one sample.\n\tif (last_zero == -1)\n\t\tlast_zero = i;\n\n\tif (i==buflen)\t// We didn't find any positive zero crossings\n\t\treturn 0;\n\n\t// The first sample might be a zero.\tIf so, return it.\n\tif (last_zero == 0)\n\t\treturn 0;\n\n\treturn last_zero;\n}\n\nfunction createNode (ac) {\n  const node = ac.createAnalyser()\n  node.fftSize = 1024\n  return node\n}\n\nfunction createRenderFunc (node, canvas) {\n  const data = new Uint8Array(canvas.width)\n  const context = canvas.getContext('2d')\n\n  return function () {\n    const { width, height } = canvas\n\n\t  node.getByteTimeDomainData(data);\n\n    context.fillStyle = 'hsl(250, 20%, 20%)'\n    context.fillRect(0, 0, width, height)\n\n\n    // draw the oscilloscope path\n    context.lineWidth = 1\n    context.strokeStyle = 'white'\n    context.beginPath()\n    const c = width / (node.fftSize/2)\n\n    var zeroCross = findFirstPositiveZeroCrossing(data, width, height);\n\t  if (zeroCross==0) zeroCross=1;\n    \n\t  for (var i=zeroCross, j=0; j<(width-zeroCross); i++, j++) {\n\t\t  context.lineTo(j,height-( c *data[i]));\n    }\n\n\t  context.stroke();\n  }\n}\n\nfunction renderLoop (node, canvas) {\n  let animFrameId\n  \n  const renderFunc = createRenderFunc(node, canvas)\n  \n  function loop () {\n    renderFunc()    \n    animFrameId = requestAnimationFrame(loop)\n  }\n  \n  loop()\n}\n\nmodule.exports = {\n  createNode,\n  createRenderFunc,\n  renderLoop\n}\n","import './main.css'\n\nimport reverbImpulse from './impulses/Basement.m4a'\nimport guitarImpulse from './impulses/impulse_guitar.wav'\nimport defs from './defs'\n\n// const electronOpenLinkInBrowser = require(\"electron-open-link-in-browser\");\n// document.querySelectorAll('a').forEach(elem => {\n//   console.log('elem', elem)\n\n//   elem.onclick = electronOpenLinkInBrowser.bind(elem)\n// })\n\nconst {\n  connectAll,\n  createNodes,\n  setParams,\n  paramTimeline,\n  num,\n  rand\n} = require('wakit')\n\nconst Tuna = require('tunajs')\n\nif (!window.ac) { window.ac = new AudioContext() }\nconst { ac } = window\n\nconst tuna = new Tuna(ac)\nconst master = setParams(ac.createGain(), {\n  gain: 1.0\n})\n\nconst convolver = new tuna.Convolver({\n  highCut: 22050,\n  lowCut: 20,\n  dryLevel: .2,\n  wetLevel: .8,\n  level: .5,\n  impulse: reverbImpulse,\n  bypass: 0\n});\n\nconst delay = new tuna.PingPongDelay({\n  wetLevel: .7,\n  feedback: .5,\n  delayTimeLeft: 150,\n  delayTimeRight: 200\n})\n\nconst cabinet = new tuna.Cabinet({\n  impulsePath: guitarImpulse,\n  makeupGain: 10\n})\n\nconst overdrive = new tuna.Overdrive({\n  outputGain: .5,\n  drive: .3,\n  curveAmount: .7,\n  algorithmIndex: 0\n})\n\nconst chorus = new tuna.Chorus({\n  rate: 5.5,\n  feedback: 0.8,\n  delay: 0.045,\n  bypass: 0\n})\n\nconst phaser = new tuna.Phaser({\n  rate: 3.2,\n  depth: 0.3,\n  feedback: 0.4,\n  stereoPhase: 30,\n  baseModulationFrequency: 700,\n  bypass: 0\n})\n\nconst compressor = setParams(ac.createDynamicsCompressor(), {\n  threshold: 0,\n  knee: 0,\n  reduction: 20.0,\n  ratio: 10,\n  attack: 1.0,\n  release: 1.0\n})\n\nconnectAll(\n  phaser,\n  master\n)\n\nconnectAll(\n  cabinet,\n  overdrive,\n  master\n)\n\nconnectAll(\n  chorus,\n  master\n)\n\nconnectAll(\n  master,\n  convolver,\n  delay,\n  compressor,\n  ac.destination\n)\n\n// ----\n\nconst scope = require('./osc-scope')\nconst scopeNode = scope.createNode(ac)\nconst scopeCanvas = document.querySelector('.scope')\n\nscope.renderLoop(scopeNode, scopeCanvas)\n\nmaster.connect(scopeNode)\n\n// ----\n\nlet lastTime\nlet detuneSource1 = ac.createConstantSource()\ndetuneSource1.start()\n\nsetInterval(() => {\n  if (ac.currentTime < lastTime) { return }\n\n  const fn = defs[2]\n  const props = {\n    time: ac.currentTime,\n    duration: rand.inRange(10, 20),\n    detune: rand.from([ 0, 1200, 2400 ])\n  }\n\n  play(fn, props, detuneSource1)\n  play(fn, {\n    time: ac.currentTime + 3,\n    duration: rand.inRange(10, 20),\n    detune: rand.from([ 700, 1200 + 700 ])\n  }, detuneSource1)\n\n  lastTime = props.time + props.duration\n}, 1000)\n\n\nlet lastTime2\nlet detuneSource2 = ac.createConstantSource()\ndetuneSource2.start()\n\nsetInterval(() => {\n  if (ac.currentTime < lastTime2) { return }\n\n  const key = rand.inRange(0, 1)\n  const fn = defs[key]\n  const props = {\n    time: ac.currentTime,\n    duration: rand.inRange(10, 20),\n    detune: rand.from([ 0, 1200 ])\n  }\n\n  const dest = rand.from([ cabinet, chorus, phaser ])\n  play(fn, props, detuneSource2, dest)\n  play(fn, {\n    ...props,\n    detune: props.detune + 1\n  }, detuneSource2, dest)\n  \n  lastTime2 = props.time + props.duration\n}, 500)\n\nlet lastTime3\nlet detuneSource3 = ac.createConstantSource()\ndetuneSource3.start()\n\nsetInterval(() => {\n  if (ac.currentTime < lastTime) { return }\n\n  const fn = defs[3]\n  const props = {\n    time: ac.currentTime,\n    duration: rand.inRange(10, 20),\n    detune: rand.from([ 0, 1200 ])\n  }\n\n  play(fn, props, detuneSource1)\n  play(fn, {\n    time: ac.currentTime + 3,\n    duration: rand.inRange(10, 20),\n    detune: rand.from([ 700, 1200 + 700 ])\n  }, detuneSource3)\n\n  lastTime = props.time + props.duration\n}, 1000)\n\n// ----\n\nconst notes = window.notes = {}\nlet noteSeq = 0\n\nfunction play (fn, props, detuneSource, dest) {\n  const note = connectAll(\n    fn(props, detuneSource),\n    dest || rand.from([ cabinet, chorus, phaser ])\n  )\n\n  const {\n    duration,\n    time\n  } = props\n\n  note.start(time)\n  note.stop(time + duration)\n\n  const id = ++noteSeq\n  notes[id] = note\n  setTimeout(() => {\n    delete notes[id]\n  }, duration * 1000)\n}\n\nsetInterval(() => {\n  const amount = rand.from([0, -200])\n  const duration = 10\n  detuneSource1.offset.linearRampToValueAtTime(amount, ac.currentTime + duration)\n}, 39000)\n\nsetInterval(() => {\n  const amount = rand.from([0, -200])\n  const duration = 10\n  detuneSource2.offset.linearRampToValueAtTime(amount, ac.currentTime + duration)\n}, 53000)\n\nsetInterval(() => {\n  const amount = rand.from([0, -200])\n  const duration = 10\n  detuneSource3.offset.linearRampToValueAtTime(amount, ac.currentTime + duration)\n}, 51000)\n"]}